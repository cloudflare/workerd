load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor")
load("@rules_rust//rust:defs.bzl", "rust_static_library")
load("@bazel_skylib//lib:selects.bzl", "selects")

selects.config_setting_group(
    name = "linux_x64",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)
selects.config_setting_group(
    name = "linux_arm64",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)
selects.config_setting_group(
    name = "macos_x64",
    match_all = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)
selects.config_setting_group(
    name = "macos_arm64",
    match_all = [
        "@platforms//os:macos",
        "@platforms//cpu:aarch64",
    ],
)
selects.config_setting_group(
    name = "win_x64",
    match_all = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)
CARGO_BAZEL = select({
    ":linux_x64": "@cargo_bazel_linux_x64//file:downloaded",
    ":linux_arm64": "@cargo_bazel_linux_arm64//file:downloaded",
    ":macos_x64": "@cargo_bazel_macos_x64//file:downloaded",
    ":macos_arm64": "@cargo_bazel_macos_arm64//file:downloaded",
    ":win_x64": "@cargo_bazel_win_x64//file:downloaded.exe",
})

# Generates a repository containing all the crates we reference from our
# rust workspace
# To repin crates: bazel run //rust-deps:crates_vendor -- --repin
crates_vendor(
    name = "crates_vendor",
    annotations = {
        "lolhtml": [crate.annotation(
            shallow_since = "1657163695 -0400",
        )],
        "lol_html": [crate.annotation(
            shallow_since = "1657163695 -0400",
        )],
    },
    cargo_bazel = CARGO_BAZEL,
    mode = "remote",
    packages = {
        "anyhow": crate.spec(
            features = ["default"],
            version = "1",
        ),
        "libc": crate.spec(
            version = "0.2",
        ),
        "addr2line": crate.spec(
            default_features = False,
            features = [
                "std",
                "rustc-demangle",
                "cpp_demangle",
                "fallible-iterator",
                "smallvec",
            ],
            version = "0.14",
        ),
        "lolhtml": crate.spec(
            git = "https://github.com/cloudflare/lol-html.git",
            rev = "a0053299f6809c2fa4e3af35a4f64bd8069952ba",
        ),

        # Used for RTTI parameter extraction
        "clang-ast": crate.spec(
            version = "0.1",
        ),
        "flate2": crate.spec(
            version = "1.0.24",
        ),
        "serde": crate.spec(
            version = "1.0",
            features = ["default", "derive"],
        ),
        "serde_json": crate.spec(
            version = "1.0",
            features = ["default"]
        ),
        "pico-args": crate.spec(
            version = "0.5",
        )
    },
    supported_platform_triples = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
        "x86_64-pc-windows-msvc",

        # this is not used but its required to work around a bug in rules_rust where
        # invalid select statements can get generated in vendored BUILD files
        "wasm32-unknown-unknown",
    ],
)

rust_static_library(
    name = "rust-deps",
    srcs = ["src/lib.rs"],
    stamp = -1, # default to bazel --stamp flag
    # When stamping is enabled this will be replaced by the corresponding
    # value in ./bazel-out/volatile-status.txt
    rustc_env = {
        "WORKERD_VERSION": "{WORKERD_VERSION}"
    },
    visibility = ["//visibility:public"],
    deps = [
        # On Windows, CXX is broken under Bazel (https://github.com/dtolnay/cxx/pull/125).
        # Luckily, util.rs and addr2line.rs are only used in the internal build which just targets
        # Linux, so we can safely disable compilation of any CXX-using code.
        "@crates_vendor//:lolhtml",
    ],
)

# define the path to the lolhtml headers, this is clunky but allows us to avoid cloning the
# repository twice.
alias(
    name = "lol_html_api",
    actual = "@crates_vendor__lol_html-1.0.0//:c-api/include/lol_html.h",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)
