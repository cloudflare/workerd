load("@bazel_skylib//lib:selects.bzl", "selects")
load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor")
load("@rules_rust//rust:defs.bzl", "rust_static_library")
load("packages.bzl", "PACKAGES")

selects.config_setting_group(
    name = "linux_x64",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)
selects.config_setting_group(
    name = "linux_arm64",
    match_all = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)
selects.config_setting_group(
    name = "macos_x64",
    match_all = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)
selects.config_setting_group(
    name = "macos_arm64",
    match_all = [
        "@platforms//os:macos",
        "@platforms//cpu:aarch64",
    ],
)
selects.config_setting_group(
    name = "win_x64",
    match_all = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
    ],
)
CARGO_BAZEL = select({
    ":linux_x64": "@cargo_bazel_linux_x64//file:downloaded",
    ":linux_arm64": "@cargo_bazel_linux_arm64//file:downloaded",
    ":macos_x64": "@cargo_bazel_macos_x64//file:downloaded",
    ":macos_arm64": "@cargo_bazel_macos_arm64//file:downloaded",
    ":win_x64": "@cargo_bazel_win_x64//file:downloaded.exe",
})

# Generates a repository containing all the crates we reference from our
# rust workspace
# To repin crates: bazel run //rust-deps:crates_vendor -- --repin
crates_vendor(
    name = "crates_vendor",
    cargo_bazel = CARGO_BAZEL,
    mode = "remote",
    packages = PACKAGES,
    supported_platform_triples = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
        "x86_64-pc-windows-msvc",
    ],
    # Not needed, we have a well-defined set of supported platforms
    generate_target_compatible_with = False,
)

rust_static_library(
    name = "rust-deps",
    srcs = ["src/lib.rs"],
    stamp = -1, # default to bazel --stamp flag
    # When stamping is enabled this will be replaced by the corresponding
    # value in ./bazel-out/volatile-status.txt
    rustc_env = {
        "WORKERD_VERSION": "{WORKERD_VERSION}"
    },
    visibility = ["//visibility:public"],
    deps = [
        # On Windows, CXX is broken under Bazel (https://github.com/dtolnay/cxx/pull/125).
        # Luckily, util.rs and addr2line.rs are only used in the internal build which just targets
        # Linux, so we can safely disable compilation of any CXX-using code.
        "@crates_vendor//:lolhtml",
    ],
)

# define the path to the lolhtml headers, this is clunky but allows us to avoid cloning the
# repository twice.
alias(
    name = "lol_html_api",
    actual = "@crates_vendor__lol_html-1.1.1//:c-api/include/lol_html.h",
    tags = ["manual"],
    visibility = ["//visibility:public"],
)
