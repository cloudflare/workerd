###############################################################################
# @generated
# DO NOT MODIFY: This file is auto-generated by a crate_universe tool. To
# regenerate this file, run the following:
#
#     bazel run @//rust-deps:crates_vendor
###############################################################################
"""
# `crates_repository` API

- [aliases](#aliases)
- [crate_deps](#crate_deps)
- [all_crate_deps](#all_crate_deps)
- [crate_repositories](#crate_repositories)

"""

load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_tools//tools/build_defs/repo:git.bzl", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")

###############################################################################
# MACROS API
###############################################################################

# An identifier that represent common dependencies (unconditional).
_COMMON_CONDITION = ""

def _flatten_dependency_maps(all_dependency_maps):
    """Flatten a list of dependency maps into one dictionary.

    Dependency maps have the following structure:

    ```python
    DEPENDENCIES_MAP = {
        # The first key in the map is a Bazel package
        # name of the workspace this file is defined in.
        "workspace_member_package": {

            # Not all dependnecies are supported for all platforms.
            # the condition key is the condition required to be true
            # on the host platform.
            "condition": {

                # An alias to a crate target.     # The label of the crate target the
                # Aliases are only crate names.   # package name refers to.
                "package_name":                   "@full//:label",
            }
        }
    }
    ```

    Args:
        all_dependency_maps (list): A list of dicts as described above

    Returns:
        dict: A dictionary as described above
    """
    dependencies = {}

    for workspace_deps_map in all_dependency_maps:
        for pkg_name, conditional_deps_map in workspace_deps_map.items():
            if pkg_name not in dependencies:
                non_frozen_map = dict()
                for key, values in conditional_deps_map.items():
                    non_frozen_map.update({key: dict(values.items())})
                dependencies.setdefault(pkg_name, non_frozen_map)
                continue

            for condition, deps_map in conditional_deps_map.items():
                # If the condition has not been recorded, do so and continue
                if condition not in dependencies[pkg_name]:
                    dependencies[pkg_name].setdefault(condition, dict(deps_map.items()))
                    continue

                # Alert on any miss-matched dependencies
                inconsistent_entries = []
                for crate_name, crate_label in deps_map.items():
                    existing = dependencies[pkg_name][condition].get(crate_name)
                    if existing and existing != crate_label:
                        inconsistent_entries.append((crate_name, existing, crate_label))
                    dependencies[pkg_name][condition].update({crate_name: crate_label})

    return dependencies

def crate_deps(deps, package_name = None):
    """Finds the fully qualified label of the requested crates for the package where this macro is called.

    Args:
        deps (list): The desired list of crate targets.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()`.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if not deps:
        return []

    if package_name == None:
        package_name = native.package_name()

    # Join both sets of dependencies
    dependencies = _flatten_dependency_maps([
        _NORMAL_DEPENDENCIES,
        _NORMAL_DEV_DEPENDENCIES,
        _PROC_MACRO_DEPENDENCIES,
        _PROC_MACRO_DEV_DEPENDENCIES,
        _BUILD_DEPENDENCIES,
        _BUILD_PROC_MACRO_DEPENDENCIES,
    ]).pop(package_name, {})

    # Combine all conditional packages so we can easily index over a flat list
    # TODO: Perhaps this should actually return select statements and maintain
    # the conditionals of the dependencies
    flat_deps = {}
    for deps_set in dependencies.values():
        for crate_name, crate_label in deps_set.items():
            flat_deps.update({crate_name: crate_label})

    missing_crates = []
    crate_targets = []
    for crate_target in deps:
        if crate_target not in flat_deps:
            missing_crates.append(crate_target)
        else:
            crate_targets.append(flat_deps[crate_target])

    if missing_crates:
        fail("Could not find crates `{}` among dependencies of `{}`. Available dependencies were `{}`".format(
            missing_crates,
            package_name,
            dependencies,
        ))

    return crate_targets

def all_crate_deps(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Finds the fully qualified label of all requested direct crate dependencies \
    for the package where this macro is called.

    If no parameters are set, all normal dependencies are returned. Setting any one flag will
    otherwise impact the contents of the returned list.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        list: A list of labels to generated rust targets (str)
    """

    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_dependency_maps = []
    if normal:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)
    if normal_dev:
        all_dependency_maps.append(_NORMAL_DEV_DEPENDENCIES)
    if proc_macro:
        all_dependency_maps.append(_PROC_MACRO_DEPENDENCIES)
    if proc_macro_dev:
        all_dependency_maps.append(_PROC_MACRO_DEV_DEPENDENCIES)
    if build:
        all_dependency_maps.append(_BUILD_DEPENDENCIES)
    if build_proc_macro:
        all_dependency_maps.append(_BUILD_PROC_MACRO_DEPENDENCIES)

    # Default to always using normal dependencies
    if not all_dependency_maps:
        all_dependency_maps.append(_NORMAL_DEPENDENCIES)

    dependencies = _flatten_dependency_maps(all_dependency_maps).pop(package_name, None)

    if not dependencies:
        if dependencies == None:
            fail("Tried to get all_crate_deps for package " + package_name + " but that package had no Cargo.toml file")
        else:
            return []

    crate_deps = list(dependencies.pop(_COMMON_CONDITION, {}).values())
    for condition, deps in dependencies.items():
        crate_deps += selects.with_or({_CONDITIONS[condition]: deps.values()})

    return crate_deps

def aliases(
        normal = False,
        normal_dev = False,
        proc_macro = False,
        proc_macro_dev = False,
        build = False,
        build_proc_macro = False,
        package_name = None):
    """Produces a map of Crate alias names to their original label

    If no dependency kinds are specified, `normal` and `proc_macro` are used by default.
    Setting any one flag will otherwise determine the contents of the returned dict.

    Args:
        normal (bool, optional): If True, normal dependencies are included in the
            output list.
        normal_dev (bool, optional): If True, normla dev dependencies will be
            included in the output list..
        proc_macro (bool, optional): If True, proc_macro dependencies are included
            in the output list.
        proc_macro_dev (bool, optional): If True, dev proc_macro dependencies are
            included in the output list.
        build (bool, optional): If True, build dependencies are included
            in the output list.
        build_proc_macro (bool, optional): If True, build proc_macro dependencies are
            included in the output list.
        package_name (str, optional): The package name of the set of dependencies to look up.
            Defaults to `native.package_name()` when unset.

    Returns:
        dict: The aliases of all associated packages
    """
    if package_name == None:
        package_name = native.package_name()

    # Determine the relevant maps to use
    all_aliases_maps = []
    if normal:
        all_aliases_maps.append(_NORMAL_ALIASES)
    if normal_dev:
        all_aliases_maps.append(_NORMAL_DEV_ALIASES)
    if proc_macro:
        all_aliases_maps.append(_PROC_MACRO_ALIASES)
    if proc_macro_dev:
        all_aliases_maps.append(_PROC_MACRO_DEV_ALIASES)
    if build:
        all_aliases_maps.append(_BUILD_ALIASES)
    if build_proc_macro:
        all_aliases_maps.append(_BUILD_PROC_MACRO_ALIASES)

    # Default to always using normal aliases
    if not all_aliases_maps:
        all_aliases_maps.append(_NORMAL_ALIASES)
        all_aliases_maps.append(_PROC_MACRO_ALIASES)

    aliases = _flatten_dependency_maps(all_aliases_maps).pop(package_name, None)

    if not aliases:
        return dict()

    common_items = aliases.pop(_COMMON_CONDITION, {}).items()

    # If there are only common items in the dictionary, immediately return them
    if not len(aliases.keys()) == 1:
        return dict(common_items)

    # Build a single select statement where each conditional has accounted for the
    # common set of aliases.
    crate_aliases = {"//conditions:default": common_items}
    for condition, deps in aliases.items():
        condition_triples = _CONDITIONS[condition]
        if condition_triples in crate_aliases:
            crate_aliases[condition_triples].update(deps)
        else:
            crate_aliases.update({_CONDITIONS[condition]: dict(deps.items() + common_items)})

    return selects.with_or(crate_aliases)

###############################################################################
# WORKSPACE MEMBER DEPS AND ALIASES
###############################################################################

_NORMAL_DEPENDENCIES = {
    "": {
        _COMMON_CONDITION: {
            "addr2line": "@crates_vendor__addr2line-0.14.1//:addr2line",
            "anyhow": "@crates_vendor__anyhow-1.0.71//:anyhow",
            "clang-ast": "@crates_vendor__clang-ast-0.1.17//:clang_ast",
            "flate2": "@crates_vendor__flate2-1.0.26//:flate2",
            "libc": "@crates_vendor__libc-0.2.144//:libc",
            "lolhtml": "@crates_vendor__lolhtml-1.0.0//:lolhtml",
            "pico-args": "@crates_vendor__pico-args-0.5.0//:pico_args",
            "serde": "@crates_vendor__serde-1.0.163//:serde",
            "serde_json": "@crates_vendor__serde_json-1.0.96//:serde_json",
        },
    },
}

_NORMAL_ALIASES = {
    "": {
        _COMMON_CONDITION: {
        },
    },
}

_NORMAL_DEV_DEPENDENCIES = {
    "": {
    },
}

_NORMAL_DEV_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_ALIASES = {
    "": {
    },
}

_PROC_MACRO_DEV_DEPENDENCIES = {
    "": {
    },
}

_PROC_MACRO_DEV_ALIASES = {
    "": {
    },
}

_BUILD_DEPENDENCIES = {
    "": {
    },
}

_BUILD_ALIASES = {
    "": {
    },
}

_BUILD_PROC_MACRO_DEPENDENCIES = {
    "": {
    },
}

_BUILD_PROC_MACRO_ALIASES = {
    "": {
    },
}

_CONDITIONS = {
    "cfg(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")))": ["wasm32-unknown-unknown"],
    "cfg(not(all(target_arch = \"arm\", target_os = \"none\")))": ["aarch64-apple-darwin", "aarch64-unknown-linux-gnu", "wasm32-unknown-unknown", "x86_64-apple-darwin", "x86_64-pc-windows-msvc", "x86_64-unknown-linux-gnu"],
    "cfg(not(target_os = \"emscripten\"))": ["aarch64-apple-darwin", "aarch64-unknown-linux-gnu", "wasm32-unknown-unknown", "x86_64-apple-darwin", "x86_64-pc-windows-msvc", "x86_64-unknown-linux-gnu"],
    "cfg(target_os = \"emscripten\")": [],
    "cfg(target_os = \"wasi\")": [],
    "cfg(unix)": ["aarch64-apple-darwin", "aarch64-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-unknown-linux-gnu"],
}

###############################################################################

def crate_repositories():
    """A macro for defining repositories for all generated crates"""
    maybe(
        http_archive,
        name = "crates_vendor__addr2line-0.14.1",
        sha256 = "a55f82cfe485775d02112886f4169bde0c5894d75e79ead7eafe7e40a25e45f7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/addr2line/0.14.1/download"],
        strip_prefix = "addr2line-0.14.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.addr2line-0.14.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__adler-1.0.2",
        sha256 = "f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/adler/1.0.2/download"],
        strip_prefix = "adler-1.0.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.adler-1.0.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__ahash-0.8.3",
        sha256 = "2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ahash/0.8.3/download"],
        strip_prefix = "ahash-0.8.3",
        build_file = Label("@workerd//rust-deps/crates:BUILD.ahash-0.8.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__anyhow-1.0.71",
        sha256 = "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/anyhow/1.0.71/download"],
        strip_prefix = "anyhow-1.0.71",
        build_file = Label("@workerd//rust-deps/crates:BUILD.anyhow-1.0.71.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bitflags-1.3.2",
        sha256 = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/1.3.2/download"],
        strip_prefix = "bitflags-1.3.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.bitflags-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__bitflags-2.3.1",
        sha256 = "6776fc96284a0bb647b615056fc496d1fe1644a7ab01829818a6d91cae888b84",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/bitflags/2.3.1/download"],
        strip_prefix = "bitflags-2.3.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.bitflags-2.3.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__byteorder-1.4.3",
        sha256 = "14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/byteorder/1.4.3/download"],
        strip_prefix = "byteorder-1.4.3",
        build_file = Label("@workerd//rust-deps/crates:BUILD.byteorder-1.4.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cc-1.0.79",
        sha256 = "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cc/1.0.79/download"],
        strip_prefix = "cc-1.0.79",
        build_file = Label("@workerd//rust-deps/crates:BUILD.cc-1.0.79.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cfg-if-1.0.0",
        sha256 = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cfg-if/1.0.0/download"],
        strip_prefix = "cfg-if-1.0.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.cfg-if-1.0.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__clang-ast-0.1.17",
        sha256 = "02c73a606ccd8c2fe7691f15c6f9b9e2eae203f8356462fe99db91840e3fb964",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/clang-ast/0.1.17/download"],
        strip_prefix = "clang-ast-0.1.17",
        build_file = Label("@workerd//rust-deps/crates:BUILD.clang-ast-0.1.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__convert_case-0.4.0",
        sha256 = "6245d59a3e82a7fc217c5828a6692dbc6dfb63a0c8c90495621f7b9d79704a0e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/convert_case/0.4.0/download"],
        strip_prefix = "convert_case-0.4.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.convert_case-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cpp_demangle-0.3.5",
        sha256 = "eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cpp_demangle/0.3.5/download"],
        strip_prefix = "cpp_demangle-0.3.5",
        build_file = Label("@workerd//rust-deps/crates:BUILD.cpp_demangle-0.3.5.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__crc32fast-1.3.2",
        sha256 = "b540bd8bc810d3885c6ea91e2018302f68baba2129ab3e88f32389ee9370880d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/crc32fast/1.3.2/download"],
        strip_prefix = "crc32fast-1.3.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.crc32fast-1.3.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cssparser-0.27.2",
        sha256 = "754b69d351cdc2d8ee09ae203db831e005560fc6030da058f86ad60c92a9cb0a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cssparser/0.27.2/download"],
        strip_prefix = "cssparser-0.27.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.cssparser-0.27.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__cssparser-macros-0.6.0",
        sha256 = "dfae75de57f2b2e85e8768c3ea840fd159c8f33e2b6522c7835b7abac81be16e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/cssparser-macros/0.6.0/download"],
        strip_prefix = "cssparser-macros-0.6.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.cssparser-macros-0.6.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__derive_more-0.99.17",
        sha256 = "4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/derive_more/0.99.17/download"],
        strip_prefix = "derive_more-0.99.17",
        build_file = Label("@workerd//rust-deps/crates:BUILD.derive_more-0.99.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__dtoa-0.4.8",
        sha256 = "56899898ce76aaf4a0f24d914c97ea6ed976d42fec6ad33fcbb0a1103e07b2b0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/dtoa/0.4.8/download"],
        strip_prefix = "dtoa-0.4.8",
        build_file = Label("@workerd//rust-deps/crates:BUILD.dtoa-0.4.8.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__dtoa-short-0.3.3",
        sha256 = "bde03329ae10e79ede66c9ce4dc930aa8599043b0743008548680f25b91502d6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/dtoa-short/0.3.3/download"],
        strip_prefix = "dtoa-short-0.3.3",
        build_file = Label("@workerd//rust-deps/crates:BUILD.dtoa-short-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__encoding_rs-0.8.32",
        sha256 = "071a31f4ee85403370b58aca746f01041ede6f0da2730960ad001edc2b71b394",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/encoding_rs/0.8.32/download"],
        strip_prefix = "encoding_rs-0.8.32",
        build_file = Label("@workerd//rust-deps/crates:BUILD.encoding_rs-0.8.32.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__fallible-iterator-0.2.0",
        sha256 = "4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fallible-iterator/0.2.0/download"],
        strip_prefix = "fallible-iterator-0.2.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.fallible-iterator-0.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__flate2-1.0.26",
        sha256 = "3b9429470923de8e8cbd4d2dc513535400b4b3fef0319fb5c4e1f520a7bef743",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/flate2/1.0.26/download"],
        strip_prefix = "flate2-1.0.26",
        build_file = Label("@workerd//rust-deps/crates:BUILD.flate2-1.0.26.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__fxhash-0.2.1",
        sha256 = "c31b6d751ae2c7f11320402d34e41349dd1016f8d5d45e48c4312bc8625af50c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/fxhash/0.2.1/download"],
        strip_prefix = "fxhash-0.2.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.fxhash-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__getrandom-0.1.16",
        sha256 = "8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/getrandom/0.1.16/download"],
        strip_prefix = "getrandom-0.1.16",
        build_file = Label("@workerd//rust-deps/crates:BUILD.getrandom-0.1.16.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__gimli-0.23.0",
        sha256 = "f6503fe142514ca4799d4c26297c4248239fe8838d827db6bd6065c6ed29a6ce",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/gimli/0.23.0/download"],
        strip_prefix = "gimli-0.23.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.gimli-0.23.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__hashbrown-0.13.2",
        sha256 = "43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/hashbrown/0.13.2/download"],
        strip_prefix = "hashbrown-0.13.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.hashbrown-0.13.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__itoa-0.4.8",
        sha256 = "b71991ff56294aa922b450139ee08b3bfc70982c6b2c7562771375cf73542dd4",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itoa/0.4.8/download"],
        strip_prefix = "itoa-0.4.8",
        build_file = Label("@workerd//rust-deps/crates:BUILD.itoa-0.4.8.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__itoa-1.0.6",
        sha256 = "453ad9f582a441959e5f0d088b02ce04cfe8d51a8eaf077f12ac6d3e94164ca6",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/itoa/1.0.6/download"],
        strip_prefix = "itoa-1.0.6",
        build_file = Label("@workerd//rust-deps/crates:BUILD.itoa-1.0.6.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__lazy_static-1.4.0",
        sha256 = "e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazy_static/1.4.0/download"],
        strip_prefix = "lazy_static-1.4.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.lazy_static-1.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__lazycell-1.3.0",
        sha256 = "830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/lazycell/1.3.0/download"],
        strip_prefix = "lazycell-1.3.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.lazycell-1.3.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__libc-0.2.144",
        sha256 = "2b00cc1c228a6782d0f076e7b232802e0c5689d41bb5df366f2a6b6621cfdfe1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/libc/0.2.144/download"],
        strip_prefix = "libc-0.2.144",
        build_file = Label("@workerd//rust-deps/crates:BUILD.libc-0.2.144.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__log-0.4.18",
        sha256 = "518ef76f2f87365916b142844c16d8fefd85039bc5699050210a7778ee1cd1de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/log/0.4.18/download"],
        strip_prefix = "log-0.4.18",
        build_file = Label("@workerd//rust-deps/crates:BUILD.log-0.4.18.bazel"),
    )

    maybe(
        new_git_repository,
        name = "crates_vendor__lol_html-1.0.0",
        commit = "a0053299f6809c2fa4e3af35a4f64bd8069952ba",
        init_submodules = True,
        shallow_since = "1684955245 +0100",
        remote = "https://github.com/cloudflare/lol-html.git",
        build_file = Label("@workerd//rust-deps/crates:BUILD.lol_html-1.0.0.bazel"),
    )

    maybe(
        new_git_repository,
        name = "crates_vendor__lolhtml-1.0.0",
        commit = "a0053299f6809c2fa4e3af35a4f64bd8069952ba",
        init_submodules = True,
        shallow_since = "1684955245 +0100",
        remote = "https://github.com/cloudflare/lol-html.git",
        build_file = Label("@workerd//rust-deps/crates:BUILD.lolhtml-1.0.0.bazel"),
        strip_prefix = "c-api",
    )

    maybe(
        http_archive,
        name = "crates_vendor__matches-0.1.10",
        sha256 = "2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/matches/0.1.10/download"],
        strip_prefix = "matches-0.1.10",
        build_file = Label("@workerd//rust-deps/crates:BUILD.matches-0.1.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__memchr-2.5.0",
        sha256 = "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/memchr/2.5.0/download"],
        strip_prefix = "memchr-2.5.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.memchr-2.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__mime-0.3.17",
        sha256 = "6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/mime/0.3.17/download"],
        strip_prefix = "mime-0.3.17",
        build_file = Label("@workerd//rust-deps/crates:BUILD.mime-0.3.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__miniz_oxide-0.7.1",
        sha256 = "e7810e0be55b428ada41041c41f32c9f1a42817901b4ccf45fa3d4b6561e74c7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/miniz_oxide/0.7.1/download"],
        strip_prefix = "miniz_oxide-0.7.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.miniz_oxide-0.7.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__nodrop-0.1.14",
        sha256 = "72ef4a56884ca558e5ddb05a1d1e7e1bfd9a68d9ed024c21704cc98872dae1bb",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/nodrop/0.1.14/download"],
        strip_prefix = "nodrop-0.1.14",
        build_file = Label("@workerd//rust-deps/crates:BUILD.nodrop-0.1.14.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__once_cell-1.17.2",
        sha256 = "9670a07f94779e00908f3e686eab508878ebb390ba6e604d3a284c00e8d0487b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/once_cell/1.17.2/download"],
        strip_prefix = "once_cell-1.17.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.once_cell-1.17.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__phf-0.8.0",
        sha256 = "3dfb61232e34fcb633f43d12c58f83c1df82962dcdfa565a4e866ffc17dafe12",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/phf/0.8.0/download"],
        strip_prefix = "phf-0.8.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.phf-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__phf_codegen-0.8.0",
        sha256 = "cbffee61585b0411840d3ece935cce9cb6321f01c45477d30066498cd5e1a815",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/phf_codegen/0.8.0/download"],
        strip_prefix = "phf_codegen-0.8.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.phf_codegen-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__phf_generator-0.8.0",
        sha256 = "17367f0cc86f2d25802b2c26ee58a7b23faeccf78a396094c13dced0d0182526",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/phf_generator/0.8.0/download"],
        strip_prefix = "phf_generator-0.8.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.phf_generator-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__phf_macros-0.8.0",
        sha256 = "7f6fde18ff429ffc8fe78e2bf7f8b7a5a5a6e2a8b58bc5a9ac69198bbda9189c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/phf_macros/0.8.0/download"],
        strip_prefix = "phf_macros-0.8.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.phf_macros-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__phf_shared-0.8.0",
        sha256 = "c00cf8b9eafe68dde5e9eaa2cef8ee84a9336a47d566ec55ca16589633b65af7",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/phf_shared/0.8.0/download"],
        strip_prefix = "phf_shared-0.8.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.phf_shared-0.8.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__pico-args-0.5.0",
        sha256 = "5be167a7af36ee22fe3115051bc51f6e6c7054c9348e28deb4f49bd6f705a315",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/pico-args/0.5.0/download"],
        strip_prefix = "pico-args-0.5.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.pico-args-0.5.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__ppv-lite86-0.2.17",
        sha256 = "5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ppv-lite86/0.2.17/download"],
        strip_prefix = "ppv-lite86-0.2.17",
        build_file = Label("@workerd//rust-deps/crates:BUILD.ppv-lite86-0.2.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__precomputed-hash-0.1.1",
        sha256 = "925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/precomputed-hash/0.1.1/download"],
        strip_prefix = "precomputed-hash-0.1.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.precomputed-hash-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__proc-macro-hack-0.5.20-deprecated",
        sha256 = "dc375e1527247fe1a97d8b7156678dfe7c1af2fc075c9a4db3690ecd2a148068",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro-hack/0.5.20+deprecated/download"],
        strip_prefix = "proc-macro-hack-0.5.20+deprecated",
        build_file = Label("@workerd//rust-deps/crates:BUILD.proc-macro-hack-0.5.20+deprecated.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__proc-macro2-1.0.59",
        sha256 = "6aeca18b86b413c660b781aa319e4e2648a3e6f9eadc9b47e9038e6fe9f3451b",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/proc-macro2/1.0.59/download"],
        strip_prefix = "proc-macro2-1.0.59",
        build_file = Label("@workerd//rust-deps/crates:BUILD.proc-macro2-1.0.59.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__quote-1.0.28",
        sha256 = "1b9ab9c7eadfd8df19006f1cf1a4aed13540ed5cbc047010ece5826e10825488",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/quote/1.0.28/download"],
        strip_prefix = "quote-1.0.28",
        build_file = Label("@workerd//rust-deps/crates:BUILD.quote-1.0.28.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rand-0.7.3",
        sha256 = "6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand/0.7.3/download"],
        strip_prefix = "rand-0.7.3",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rand-0.7.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rand_chacha-0.2.2",
        sha256 = "f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_chacha/0.2.2/download"],
        strip_prefix = "rand_chacha-0.2.2",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rand_chacha-0.2.2.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rand_core-0.5.1",
        sha256 = "90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_core/0.5.1/download"],
        strip_prefix = "rand_core-0.5.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rand_core-0.5.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rand_hc-0.2.0",
        sha256 = "ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_hc/0.2.0/download"],
        strip_prefix = "rand_hc-0.2.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rand_hc-0.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rand_pcg-0.2.1",
        sha256 = "16abd0c1b639e9eb4d7c50c0b8100b0d0f849be2349829c740fe8e6eb4816429",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rand_pcg/0.2.1/download"],
        strip_prefix = "rand_pcg-0.2.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rand_pcg-0.2.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rustc-demangle-0.1.23",
        sha256 = "d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustc-demangle/0.1.23/download"],
        strip_prefix = "rustc-demangle-0.1.23",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rustc-demangle-0.1.23.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__rustc_version-0.4.0",
        sha256 = "bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/rustc_version/0.4.0/download"],
        strip_prefix = "rustc_version-0.4.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.rustc_version-0.4.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__ryu-1.0.13",
        sha256 = "f91339c0467de62360649f8d3e185ca8de4224ff281f66000de5eb2a77a79041",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/ryu/1.0.13/download"],
        strip_prefix = "ryu-1.0.13",
        build_file = Label("@workerd//rust-deps/crates:BUILD.ryu-1.0.13.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__safemem-0.3.3",
        sha256 = "ef703b7cb59335eae2eb93ceb664c0eb7ea6bf567079d843e09420219668e072",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/safemem/0.3.3/download"],
        strip_prefix = "safemem-0.3.3",
        build_file = Label("@workerd//rust-deps/crates:BUILD.safemem-0.3.3.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__selectors-0.22.0",
        sha256 = "df320f1889ac4ba6bc0cdc9c9af7af4bd64bb927bccdf32d81140dc1f9be12fe",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/selectors/0.22.0/download"],
        strip_prefix = "selectors-0.22.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.selectors-0.22.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__semver-1.0.17",
        sha256 = "bebd363326d05ec3e2f532ab7660680f3b02130d780c299bca73469d521bc0ed",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/semver/1.0.17/download"],
        strip_prefix = "semver-1.0.17",
        build_file = Label("@workerd//rust-deps/crates:BUILD.semver-1.0.17.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__serde-1.0.163",
        sha256 = "2113ab51b87a539ae008b5c6c02dc020ffa39afd2d83cffcb3f4eb2722cebec2",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde/1.0.163/download"],
        strip_prefix = "serde-1.0.163",
        build_file = Label("@workerd//rust-deps/crates:BUILD.serde-1.0.163.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__serde_derive-1.0.163",
        sha256 = "8c805777e3930c8883389c602315a24224bcc738b63905ef87cd1420353ea93e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_derive/1.0.163/download"],
        strip_prefix = "serde_derive-1.0.163",
        build_file = Label("@workerd//rust-deps/crates:BUILD.serde_derive-1.0.163.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__serde_json-1.0.96",
        sha256 = "057d394a50403bcac12672b2b18fb387ab6d289d957dab67dd201875391e52f1",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/serde_json/1.0.96/download"],
        strip_prefix = "serde_json-1.0.96",
        build_file = Label("@workerd//rust-deps/crates:BUILD.serde_json-1.0.96.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__servo_arc-0.1.1",
        sha256 = "d98238b800e0d1576d8b6e3de32827c2d74bee68bb97748dcf5071fb53965432",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/servo_arc/0.1.1/download"],
        strip_prefix = "servo_arc-0.1.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.servo_arc-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__siphasher-0.3.10",
        sha256 = "7bd3e3206899af3f8b12af284fafc038cc1dc2b41d1b89dd17297221c5d225de",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/siphasher/0.3.10/download"],
        strip_prefix = "siphasher-0.3.10",
        build_file = Label("@workerd//rust-deps/crates:BUILD.siphasher-0.3.10.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__smallvec-1.10.0",
        sha256 = "a507befe795404456341dfab10cef66ead4c041f62b8b11bbb92bffe5d0953e0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/smallvec/1.10.0/download"],
        strip_prefix = "smallvec-1.10.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.smallvec-1.10.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__stable_deref_trait-1.2.0",
        sha256 = "a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/stable_deref_trait/1.2.0/download"],
        strip_prefix = "stable_deref_trait-1.2.0",
        build_file = Label("@workerd//rust-deps/crates:BUILD.stable_deref_trait-1.2.0.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__syn-1.0.109",
        sha256 = "72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/1.0.109/download"],
        strip_prefix = "syn-1.0.109",
        build_file = Label("@workerd//rust-deps/crates:BUILD.syn-1.0.109.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__syn-2.0.18",
        sha256 = "32d41677bcbe24c20c52e7c70b0d8db04134c5d1066bf98662e2871ad200ea3e",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/syn/2.0.18/download"],
        strip_prefix = "syn-2.0.18",
        build_file = Label("@workerd//rust-deps/crates:BUILD.syn-2.0.18.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__thin-slice-0.1.1",
        sha256 = "8eaa81235c7058867fa8c0e7314f33dcce9c215f535d1913822a2b3f5e289f3c",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thin-slice/0.1.1/download"],
        strip_prefix = "thin-slice-0.1.1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.thin-slice-0.1.1.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__thiserror-1.0.40",
        sha256 = "978c9a314bd8dc99be594bc3c175faaa9794be04a5a5e153caba6915336cebac",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror/1.0.40/download"],
        strip_prefix = "thiserror-1.0.40",
        build_file = Label("@workerd//rust-deps/crates:BUILD.thiserror-1.0.40.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__thiserror-impl-1.0.40",
        sha256 = "f9456a42c5b0d803c8cd86e73dd7cc9edd429499f37a3550d286d5e86720569f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/thiserror-impl/1.0.40/download"],
        strip_prefix = "thiserror-impl-1.0.40",
        build_file = Label("@workerd//rust-deps/crates:BUILD.thiserror-impl-1.0.40.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__unicode-ident-1.0.9",
        sha256 = "b15811caf2415fb889178633e7724bad2509101cde276048e013b9def5e51fa0",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/unicode-ident/1.0.9/download"],
        strip_prefix = "unicode-ident-1.0.9",
        build_file = Label("@workerd//rust-deps/crates:BUILD.unicode-ident-1.0.9.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__version_check-0.9.4",
        sha256 = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/version_check/0.9.4/download"],
        strip_prefix = "version_check-0.9.4",
        build_file = Label("@workerd//rust-deps/crates:BUILD.version_check-0.9.4.bazel"),
    )

    maybe(
        http_archive,
        name = "crates_vendor__wasi-0.9.0-wasi-snapshot-preview1",
        sha256 = "cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519",
        type = "tar.gz",
        urls = ["https://crates.io/api/v1/crates/wasi/0.9.0+wasi-snapshot-preview1/download"],
        strip_prefix = "wasi-0.9.0+wasi-snapshot-preview1",
        build_file = Label("@workerd//rust-deps/crates:BUILD.wasi-0.9.0+wasi-snapshot-preview1.bazel"),
    )
