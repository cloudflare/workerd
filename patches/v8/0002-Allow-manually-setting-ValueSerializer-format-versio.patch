From 499d19dd9bcaad728af7644298a2a8bba28b8de2 Mon Sep 17 00:00:00 2001
From: James M Snell <jasnell@gmail.com>
Date: Wed, 16 Mar 2022 08:59:21 -0700
Subject: [PATCH 02/22] Allow manually setting ValueSerializer format version

Refs: https://bitbucket.cfdata.org/projects/MIRRORS/repos/v8/pull-requests/2/overview
---
 include/v8-value-serializer.h   |  5 +++++
 src/api/api.cc                  |  4 ++++
 src/objects/value-serializer.cc | 17 ++++++++++++++---
 src/objects/value-serializer.h  |  6 ++++++
 4 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/include/v8-value-serializer.h b/include/v8-value-serializer.h
index 40ad805c797..596be18adeb 100644
--- a/include/v8-value-serializer.h
+++ b/include/v8-value-serializer.h
@@ -154,6 +154,11 @@ class V8_EXPORT ValueSerializer {
   ValueSerializer(Isolate* isolate, Delegate* delegate);
   ~ValueSerializer();
 
+  /**
+   * Instruct the ValueSerializer to write at a specific serializer version.
+   */
+  Maybe<bool> SetWriteVersion(uint32_t version);
+
   /**
    * Writes out a header, which includes the format version.
    */
diff --git a/src/api/api.cc b/src/api/api.cc
index 9ad68e27f2a..7b4e1d60cb0 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -3337,6 +3337,10 @@ ValueSerializer::ValueSerializer(Isolate* v8_isolate, Delegate* delegate)
 
 ValueSerializer::~ValueSerializer() { delete private_; }
 
+Maybe<bool> ValueSerializer::SetWriteVersion(uint32_t version) {
+  return private_->serializer.SetWriteVersion(version);
+}
+
 void ValueSerializer::WriteHeader() { private_->serializer.WriteHeader(); }
 
 void ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool mode) {
diff --git a/src/objects/value-serializer.cc b/src/objects/value-serializer.cc
index a892f3fc4e6..4b08dd27a2e 100644
--- a/src/objects/value-serializer.cc
+++ b/src/objects/value-serializer.cc
@@ -297,6 +297,7 @@ ValueSerializer::ValueSerializer(Isolate* isolate,
     : isolate_(isolate),
       delegate_(delegate),
       zone_(isolate->allocator(), ZONE_NAME),
+      version_(kLatestVersion),
       id_map_(isolate->heap(), ZoneAllocationPolicy(&zone_)),
       array_buffer_transfer_map_(isolate->heap(),
                                  ZoneAllocationPolicy(&zone_)) {
@@ -316,9 +317,17 @@ ValueSerializer::~ValueSerializer() {
   }
 }
 
+Maybe<bool> ValueSerializer::SetWriteVersion(uint32_t version) {
+  if (version < 13 || version > kLatestVersion) {
+    return ThrowDataCloneError(MessageTemplate::kDataCloneError);
+  }
+  version_ = version;
+  return Just(true);
+}
+
 void ValueSerializer::WriteHeader() {
   WriteTag(SerializationTag::kVersion);
-  WriteVarint(kLatestVersion);
+  WriteVarint(version_);
 }
 
 void ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool mode) {
@@ -1093,10 +1102,12 @@ Maybe<bool> ValueSerializer::WriteJSArrayBufferView(
   WriteVarint(static_cast<uint8_t>(tag));
   WriteVarint(static_cast<uint32_t>(view->byte_offset()));
   WriteVarint(static_cast<uint32_t>(view->byte_length()));
-  uint32_t flags =
+  if (version_ >= 14) {
+    uint32_t flags =
       JSArrayBufferViewIsLengthTracking::encode(view->is_length_tracking()) |
       JSArrayBufferViewIsBackedByRab::encode(view->is_backed_by_rab());
-  WriteVarint(flags);
+    WriteVarint(flags);
+  }
   return ThrowIfOutOfMemory();
 }
 
diff --git a/src/objects/value-serializer.h b/src/objects/value-serializer.h
index 395f3848f0d..a463753df6e 100644
--- a/src/objects/value-serializer.h
+++ b/src/objects/value-serializer.h
@@ -54,6 +54,11 @@ class ValueSerializer {
   ValueSerializer(const ValueSerializer&) = delete;
   ValueSerializer& operator=(const ValueSerializer&) = delete;
 
+  /*
+   * Instruct the ValueSerializer to write at a specific serializer version.
+   */
+  Maybe<bool> SetWriteVersion(uint32_t version);
+
   /*
    * Writes out a header, which includes the format version.
    */
@@ -182,6 +187,7 @@ class ValueSerializer {
   bool treat_array_buffer_views_as_host_objects_ = false;
   bool out_of_memory_ = false;
   Zone zone_;
+  uint32_t version_;
 
   // To avoid extra lookups in the identity map, ID+1 is actually stored in the
   // map (checking if the used identity is zero is the fast way of checking if
-- 
2.43.0

