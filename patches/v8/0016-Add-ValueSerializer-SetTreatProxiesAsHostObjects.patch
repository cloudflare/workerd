From b943a7389e6e01e91a61e0615ce8d92dd58df7f5 Mon Sep 17 00:00:00 2001
From: Kenton Varda <kenton@cloudflare.com>
Date: Wed, 4 Dec 2024 22:36:05 -0600
Subject: [PATCH 16/22] Add ValueSerializer::SetTreatProxiesAsHostObjects().

Previously, ValueSerializer would always refuse to serialize Proxy objects. This commit gives the embedder the option to handle them as host objects.

Similar to the previous patch adding `SetTreatFunctionsAsHostObjects()`, this is intended for use in an RPC system, where an arbitrary object can be "serialized" by replacing it with a stub which, when invoked, performs an RPC back to the originating isolate in order to access the original object there.
---
 include/v8-value-serializer.h   |  9 +++++++++
 src/api/api.cc                  |  4 ++++
 src/objects/value-serializer.cc | 13 +++++++++++--
 src/objects/value-serializer.h  | 13 +++++++++++--
 4 files changed, 35 insertions(+), 4 deletions(-)

diff --git a/include/v8-value-serializer.h b/include/v8-value-serializer.h
index 141f138e08d..bdcb2831c55 100644
--- a/include/v8-value-serializer.h
+++ b/include/v8-value-serializer.h
@@ -204,6 +204,15 @@ class V8_EXPORT ValueSerializer {
    */
   void SetTreatFunctionsAsHostObjects(bool mode);
 
+  /**
+   * Indicate whether to treat Proxies as host objects,
+   * i.e. pass them to Delegate::WriteHostObject. This should not be
+   * called when no Delegate was passed.
+   *
+   * The default is not to treat Proxies as host objects.
+   */
+  void SetTreatProxiesAsHostObjects(bool mode);
+
   /**
    * Write raw data in various common formats to the buffer.
    * Note that integer types are written in base-128 varint format, not with a
diff --git a/src/api/api.cc b/src/api/api.cc
index e255e18ba79..b711f183d72 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -3351,6 +3351,10 @@ void ValueSerializer::SetTreatFunctionsAsHostObjects(bool mode) {
   private_->serializer.SetTreatFunctionsAsHostObjects(mode);
 }
 
+void ValueSerializer::SetTreatProxiesAsHostObjects(bool mode) {
+  private_->serializer.SetTreatProxiesAsHostObjects(mode);
+}
+
 Maybe<bool> ValueSerializer::WriteValue(Local<Context> context,
                                         Local<Value> value) {
   auto i_isolate = i::Isolate::Current();
diff --git a/src/objects/value-serializer.cc b/src/objects/value-serializer.cc
index f8150588e75..096e1d12904 100644
--- a/src/objects/value-serializer.cc
+++ b/src/objects/value-serializer.cc
@@ -338,6 +338,10 @@ void ValueSerializer::SetTreatFunctionsAsHostObjects(bool mode) {
   treat_functions_as_host_objects_ = mode;
 }
 
+void ValueSerializer::SetTreatProxiesAsHostObjects(bool mode) {
+  treat_proxies_as_host_objects_ = mode;
+}
+
 void ValueSerializer::WriteTag(SerializationTag tag) {
   uint8_t raw_tag = static_cast<uint8_t>(tag);
   WriteRawBytes(&raw_tag, sizeof(raw_tag));
@@ -609,7 +613,12 @@ Maybe<bool> ValueSerializer::WriteJSReceiver(
   InstanceType instance_type = receiver->map()->instance_type();
   if (IsCallable(*receiver)) {
     if (treat_functions_as_host_objects_) {
-      return WriteHostObject(Cast<JSObject>(receiver));
+      return WriteHostObject(receiver);
+    }
+    return ThrowDataCloneError(MessageTemplate::kDataCloneError, receiver);
+  } else if (instance_type == JS_PROXY_TYPE) {
+    if (treat_proxies_as_host_objects_) {
+      return WriteHostObject(receiver);
     }
     return ThrowDataCloneError(MessageTemplate::kDataCloneError, receiver);
   } else if (IsSpecialReceiverInstanceType(instance_type) &&
@@ -1268,7 +1277,7 @@ Maybe<bool> ValueSerializer::WriteSharedObject(
   return ThrowIfOutOfMemory();
 }
 
-Maybe<bool> ValueSerializer::WriteHostObject(DirectHandle<JSObject> object) {
+Maybe<bool> ValueSerializer::WriteHostObject(DirectHandle<JSReceiver> object) {
   WriteTag(SerializationTag::kHostObject);
   if (!delegate_) {
     isolate_->Throw(*isolate_->factory()->NewError(
diff --git a/src/objects/value-serializer.h b/src/objects/value-serializer.h
index 2d0a746c905..7ec442c5e00 100644
--- a/src/objects/value-serializer.h
+++ b/src/objects/value-serializer.h
@@ -111,6 +111,15 @@ class ValueSerializer {
    */
   void SetTreatFunctionsAsHostObjects(bool mode);
 
+  /*
+   * Indicate whether to treat Proxies as host objects,
+   * i.e. pass them to Delegate::WriteHostObject. This should not be
+   * called when no Delegate was passed.
+   *
+   * The default is not to treat Proxies as host objects.
+   */
+  void SetTreatProxiesAsHostObjects(bool mode);
+
  private:
   // Managing allocations of the internal buffer.
   Maybe<bool> ExpandBuffer(size_t required_capacity);
@@ -161,8 +170,7 @@ class ValueSerializer {
 #endif  // V8_ENABLE_WEBASSEMBLY
   Maybe<bool> WriteSharedObject(DirectHandle<HeapObject> object)
       V8_WARN_UNUSED_RESULT;
-  Maybe<bool> WriteHostObject(DirectHandle<JSObject> object)
-      V8_WARN_UNUSED_RESULT;
+  Maybe<bool> WriteHostObject(DirectHandle<JSReceiver> object) V8_WARN_UNUSED_RESULT;
 
   /*
    * Reads the specified keys from the object and writes key-value pairs to the
@@ -195,6 +203,7 @@ class ValueSerializer {
   bool has_custom_host_objects_ = false;
   bool treat_array_buffer_views_as_host_objects_ = false;
   bool treat_functions_as_host_objects_ = false;
+  bool treat_proxies_as_host_objects_ = false;
   bool out_of_memory_ = false;
   Zone zone_;
   uint32_t version_;
-- 
2.43.0

