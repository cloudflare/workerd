From 9fbfa1ab0ce695ec96a5a01f721b5c696ba8ceb8 Mon Sep 17 00:00:00 2001
From: Kenton Varda <kenton@cloudflare.com>
Date: Tue, 23 May 2023 09:18:57 -0500
Subject: Make v8::Locker automatically call isolate->Enter().

This makes it no longer necessary to create a v8::Isolate::Scope after taking the lock.

More importantly, without this change, the Locker consturctor will segfault when V8 is compiled with pointer compression enabled but shared pointer cages disabled, also known as multi-cage mode. This change ensures that the cage base pointers are set up immediately after taking the lock, before other code runs that depends on them.

This is a major change in API semantics, however, which makes it unlikely to be upstreamable.
---
 src/execution/v8threads.cc | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/execution/v8threads.cc b/src/execution/v8threads.cc
index be4f4a7f209e3e8d784d8ab57d0ef77a58df8790..fb525314d9fb6dca143dbe45bfd6dbf53af132c8 100644
--- a/src/execution/v8threads.cc
+++ b/src/execution/v8threads.cc
@@ -40,6 +40,7 @@ void Locker::Initialize(v8::Isolate* isolate) {
   if (!isolate_->thread_manager()->IsLockedByCurrentThread()) {
     isolate_->thread_manager()->Lock();
     has_lock_ = true;
+    isolate_->Enter();
 
     // This may be a locker within an unlocker in which case we have to
     // get the saved state for this thread and restore it.
@@ -64,6 +65,7 @@ Locker::~Locker() {
     } else {
       isolate_->thread_manager()->ArchiveThread();
     }
+    isolate_->Exit();
     isolate_->thread_manager()->Unlock();
   }
 }
