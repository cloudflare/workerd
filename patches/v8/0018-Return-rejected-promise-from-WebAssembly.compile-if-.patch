From d0537368e8550cad1303e2a80ba8545a3e6ee536 Mon Sep 17 00:00:00 2001
From: Aaron Loyd <aloyd@cloudflare.com>
Date: Fri, 8 Nov 2024 16:41:46 -0600
Subject: Return rejected promise from WebAssembly.compile if codegen is
 disabled

Many users try to compile WASM in the top level, handling errors when
they decide to use the resulting module. Throwing exceptions directly
prevents a lot of valid scripts from executing their top-level without
a try/catch if codegen is disabled.

This fixes WebAssemblyCompileImpl to match the other APIs by returning
a rejected promise.

Change-Id: I080e340604cddc538cc06a293219297af5937237
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/6006695
Reviewed-by: Clemens Backes <clemensb@chromium.org>
Reviewed-by: Jakob Kummerow <jkummerow@chromium.org>
Commit-Queue: Clemens Backes <clemensb@chromium.org>
Cr-Commit-Position: refs/heads/main@{#97094}

diff --git a/src/wasm/wasm-js.cc b/src/wasm/wasm-js.cc
index ddf4d4911e28df0fc9b75a099e598c6860caf368..04203d29a8403d8d6377cb624353fb017a9d8ef1 100644
--- a/src/wasm/wasm-js.cc
+++ b/src/wasm/wasm-js.cc
@@ -702,14 +702,6 @@ void WebAssemblyCompileImpl(const v8::FunctionCallbackInfo<v8::Value>& info) {
   auto [isolate, i_isolate, thrower] = js_api_scope.isolates_and_thrower();
   RecordCompilationMethod(i_isolate, kAsyncCompilation);
 
-  i::Handle<i::NativeContext> native_context = i_isolate->native_context();
-  if (!i::wasm::IsWasmCodegenAllowed(i_isolate, native_context)) {
-    i::DirectHandle<i::String> error =
-        i::wasm::ErrorStringForCodegen(i_isolate, native_context);
-    thrower.CompileError("%s", error->ToCString().get());
-    return;
-  }
-
   Local<Context> context = isolate->GetCurrentContext();
   ASSIGN(Promise::Resolver, promise_resolver, Promise::Resolver::New(context));
   Local<Promise> promise = promise_resolver->GetPromise();
@@ -719,6 +711,15 @@ void WebAssemblyCompileImpl(const v8::FunctionCallbackInfo<v8::Value>& info) {
   std::shared_ptr<i::wasm::CompilationResultResolver> resolver(
       new AsyncCompilationResolver(isolate, context, promise_resolver));
 
+  i::Handle<i::NativeContext> native_context = i_isolate->native_context();
+  if (!i::wasm::IsWasmCodegenAllowed(i_isolate, native_context)) {
+    i::DirectHandle<i::String> error =
+        i::wasm::ErrorStringForCodegen(i_isolate, native_context);
+    thrower.CompileError("%s", error->ToCString().get());
+    resolver->OnCompilationFailed(thrower.Reify());
+    return;
+  }
+
   bool is_shared = false;
   auto bytes = GetFirstArgumentAsBytes(info, i::wasm::max_module_size(),
                                        &thrower, &is_shared);
