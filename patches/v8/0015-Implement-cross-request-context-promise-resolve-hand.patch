From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: James M Snell <jasnell@gmail.com>
Date: Mon, 16 Sep 2024 09:56:04 -0700
Subject: Implement cross-request context promise resolve handling


diff --git a/include/v8-callbacks.h b/include/v8-callbacks.h
index 27f7e34460482255588ff18cc6f10937e392cefc..f307d2e39bb2ed73e4a1446bd718f9110707924b 100644
--- a/include/v8-callbacks.h
+++ b/include/v8-callbacks.h
@@ -526,6 +526,27 @@ using PromiseCrossContextCallback = MaybeLocal<Promise> (*)(Local<Context> conte
                                                             Local<Promise> promise,
                                                             Local<Object> tag);
 
+/**
+ * PromiseCrossContextResolveCallback is called when resolving or rejecting a
+ * pending promise whose context tag is not strictly equal to the isolate's
+ * current promise context tag. The callback is called with the promise to be
+ * resolved, its context tag, and a function that when called, causes the
+ * reactions to the resolved promise to be enqueued. The idea is that the
+ * embedder sets this callback in the case it needs to defer the actual
+ * scheduling of the reactions to the given promise to a later time.
+ * Importantly, when this callback is invoked, the state of the promise
+ * should have already been updated. We're simply possibly deferring the
+ * enqueue of the reactions to the promise.
+ */
+using PromiseCrossContextResolveCallback = Maybe<void> (*)(
+    v8::Isolate* isolate,
+    Local<Value> tag,
+    Local<Data> reactions,
+    Local<Value> argument,
+    std::function<void(v8::Isolate* isolate,
+                       Local<Data> reactions,
+                       Local<Value> argument)> callback);
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_CALLBACKS_H_
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 993189d229705d16ddb4380a765b4a655b4697e5..2e3aab1e8b88aa7843a4e02ef440c44277c5e627 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -1885,6 +1885,8 @@ class V8_EXPORT Isolate {
 
   class PromiseContextScope;
   void SetPromiseCrossContextCallback(PromiseCrossContextCallback callback);
+  void SetPromiseCrossContextResolveCallback(
+      PromiseCrossContextResolveCallback callback);
 
   Isolate() = delete;
   ~Isolate() = delete;
diff --git a/src/api/api.cc b/src/api/api.cc
index 27575d6c54065b107643ea9caaaa18f439f0a854..fb819c77d9828bc1cc4b50b94a839cee016d3961 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -12580,12 +12580,17 @@ void Isolate::SetPromiseCrossContextCallback(PromiseCrossContextCallback callbac
   isolate->set_promise_cross_context_callback(callback);
 }
 
+void Isolate::SetPromiseCrossContextResolveCallback(PromiseCrossContextResolveCallback callback) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  isolate->set_promise_cross_context_resolve_callback(callback);
+}
+
 Isolate::PromiseContextScope::PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag)
     : isolate_(reinterpret_cast<i::Isolate*>(isolate)) {
   DCHECK(!isolate_->has_promise_context_tag());
   DCHECK(!tag.IsEmpty());
   i::Handle<i::Object> handle = Utils::OpenHandle(*tag);
-  isolate_->set_promise_context_tag(*handle);
+  isolate_->set_promise_context_tag(handle);
 }
 
 Isolate::PromiseContextScope::~PromiseContextScope() {
diff --git a/src/builtins/promise-abstract-operations.tq b/src/builtins/promise-abstract-operations.tq
index 6142e0450dac646ccebd3fc7c5168f9b42b4d0b5..9acc20825711c87aa3fe07916cddf208e0963b9f 100644
--- a/src/builtins/promise-abstract-operations.tq
+++ b/src/builtins/promise-abstract-operations.tq
@@ -23,6 +23,9 @@ extern transitioning runtime PromiseRejectEventFromStack(
 
 extern transitioning runtime PromiseContextCheck(
     implicit context: Context)(JSPromise): JSPromise;
+
+extern transitioning runtime PromiseResolveContextCheck(
+    implicit context: Context)(JSPromise): JSAny;
 }
 
 // https://tc39.es/ecma262/#sec-promise-abstract-operations
@@ -239,7 +242,8 @@ transitioning builtin RejectPromise(
   // the runtime handle this operation, which greatly reduces
   // the complexity here and also avoids a couple of back and
   // forth between JavaScript and C++ land.
-  if (IsIsolatePromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate(
+  if (ToBoolean(runtime::PromiseResolveContextCheck(promise)) ||
+      IsIsolatePromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate(
           promiseHookFlags) ||
       !promise.HasHandler()) {
     // 7. If promise.[[PromiseIsHandled]] is false, perform
diff --git a/src/builtins/promise-resolve.tq b/src/builtins/promise-resolve.tq
index 202180adbbae91a689a667c40d20b4b1b9cb6edd..c93ac5905d7b349d1c59e9fa86b48662313ea1c3 100644
--- a/src/builtins/promise-resolve.tq
+++ b/src/builtins/promise-resolve.tq
@@ -96,7 +96,9 @@ transitioning builtin ResolvePromise(
   // We also let the runtime handle it if promise == resolution.
   // We can use pointer comparison here, since the {promise} is guaranteed
   // to be a JSPromise inside this function and thus is reference comparable.
-  if (IsIsolatePromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate() ||
+
+  if (ToBoolean(runtime::PromiseResolveContextCheck(promise)) ||
+      IsIsolatePromiseHookEnabledOrDebugIsActiveOrHasAsyncEventDelegate() ||
       TaggedEqual(promise, resolution))
     deferred {
       return runtime::ResolvePromise(promise, resolution);
diff --git a/src/execution/isolate-inl.h b/src/execution/isolate-inl.h
index 7c48e9a9b4d79d189ba9cea669c0a8e87dd111dd..785cd5e5b2be0894855aef4fe9034b4f162e3cd8 100644
--- a/src/execution/isolate-inl.h
+++ b/src/execution/isolate-inl.h
@@ -131,26 +131,35 @@ bool Isolate::is_execution_terminating() {
          i::ReadOnlyRoots(this).termination_exception();
 }
 
-Tagged<Object> Isolate::promise_context_tag() {
-  return promise_context_tag_;
+Handle<Object> Isolate::promise_context_tag() {
+  return root_handle(RootIndex::kPromiseContextTag);
 }
 
 bool Isolate::has_promise_context_tag() {
-  return promise_context_tag_ != ReadOnlyRoots(this).the_hole_value();
+  return heap()->promise_context_tag() != ReadOnlyRoots(this).the_hole_value();
 }
 
 void Isolate::clear_promise_context_tag() {
-  set_promise_context_tag(ReadOnlyRoots(this).the_hole_value());
+  heap()->set_promise_context_tag(ReadOnlyRoots(this).the_hole_value());
 }
 
-void Isolate::set_promise_context_tag(Tagged<Object> tag) {
-  promise_context_tag_ = tag;
+void Isolate::set_promise_context_tag(Handle<Object> tag) {
+  heap()->set_promise_context_tag(*tag);
 }
 
 void Isolate::set_promise_cross_context_callback(PromiseCrossContextCallback callback) {
   promise_cross_context_callback_ = callback;
 }
 
+void Isolate::set_promise_cross_context_resolve_callback(
+    PromiseCrossContextResolveCallback callback) {
+  promise_cross_context_resolve_callback_ = callback;
+}
+
+bool Isolate::has_promise_context_resolve_callback() {
+  return promise_cross_context_resolve_callback_ != nullptr;
+}
+
 #ifdef DEBUG
 Tagged<Object> Isolate::VerifyBuiltinsResult(Tagged<Object> result) {
   if (is_execution_terminating() && !v8_flags.strict_termination_checks) {
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index ec036de8252bb9dd9bc4396bb415b6166b2537ac..3f748394c3aea0379e5d5a3e4750d655e3d6ff74 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -612,8 +612,6 @@ void Isolate::Iterate(RootVisitor* v, ThreadLocalTop* thread) {
                       FullObjectSlot(&thread->pending_message_));
   v->VisitRootPointer(Root::kStackRoots, nullptr,
                       FullObjectSlot(&thread->context_));
-  v->VisitRootPointer(Root::kStackRoots, nullptr,
-                      FullObjectSlot(&promise_context_tag_));
 
   for (v8::TryCatch* block = thread->try_catch_handler_; block != nullptr;
        block = block->next_) {
@@ -7675,5 +7673,27 @@ MaybeHandle<JSPromise> Isolate::RunPromiseCrossContextCallback(Handle<NativeCont
   return v8::Utils::OpenHandle(*result);
 }
 
+Maybe<void> Isolate::RunPromiseCrossContextResolveCallback(v8::Isolate* isolate,
+                                                           Handle<JSObject> tag,
+                                                           DirectHandle<Object> reactions,
+                                                           DirectHandle<Object> argument,
+                                                           PromiseReaction::Type type) {
+  CHECK(promise_cross_context_resolve_callback_ != nullptr);
+  return promise_cross_context_resolve_callback_(
+      isolate,
+      v8::Utils::ToLocal(tag),
+      v8::Utils::ToLocal(reactions),
+      v8::Utils::ToLocal(argument),
+      [type](v8::Isolate* isolate,
+             v8::Local<v8::Data> reactions,
+             v8::Local<v8::Value> argument) {
+    JSPromise::ContinueTriggerPromiseReactions(
+        reinterpret_cast<Isolate*>(isolate),
+        Utils::OpenHandle(*reactions),
+        Utils::OpenHandle(*argument),
+        type);
+  });
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index 39ade2b9e8dd354ca614207f088f46b9105393cb..e44c3a98d5d91c22617bae6f897a130de4426a9a 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -43,6 +43,7 @@
 #include "src/objects/contexts.h"
 #include "src/objects/debug-objects.h"
 #include "src/objects/js-objects.h"
+#include "src/objects/promise.h"
 #include "src/objects/tagged.h"
 #include "src/runtime/runtime.h"
 #include "src/sandbox/code-pointer-table.h"
@@ -2383,13 +2384,22 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
                                        v8::ExceptionContext callback_kind);
   void SetExceptionPropagationCallback(ExceptionPropagationCallback callback);
 
-  inline Tagged<Object> promise_context_tag();
+  inline Handle<Object> promise_context_tag();
   inline bool has_promise_context_tag();
   inline void clear_promise_context_tag();
-  inline void set_promise_context_tag(Tagged<Object> tag);
+  inline void set_promise_context_tag(Handle<Object> tag);
   inline void set_promise_cross_context_callback(PromiseCrossContextCallback callback);
+  inline void set_promise_cross_context_resolve_callback(
+      PromiseCrossContextResolveCallback callback);
   MaybeHandle<JSPromise> RunPromiseCrossContextCallback(Handle<NativeContext> context,
                                                         Handle<JSPromise> promise);
+  Maybe<void> RunPromiseCrossContextResolveCallback(v8::Isolate* isolate,
+                                                    Handle<JSObject> tag,
+                                                    DirectHandle<Object> reactions,
+                                                    DirectHandle<Object> argument,
+                                                    PromiseReaction::Type type);
+
+  inline bool has_promise_context_resolve_callback();
 
 #ifdef V8_ENABLE_WASM_SIMD256_REVEC
   void set_wasm_revec_verifier_for_test(
@@ -2918,9 +2928,10 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
 
   bool is_frozen_ = false;
 
-  Tagged<Object> promise_context_tag_;
-  PromiseCrossContextCallback promise_cross_context_callback_;
+  PromiseCrossContextCallback promise_cross_context_callback_ = nullptr;
+  PromiseCrossContextResolveCallback promise_cross_context_resolve_callback_ = nullptr;
   bool in_promise_cross_context_callback_ = false;
+  bool in_promise_cross_context_resolve_callback_ = false;
 
   class PromiseCrossContextCallbackScope;
 
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index 18cbb2142a1f1d6b02bf8a0b7a6d650b72784502..3ced6a983af97bd928f40c5974c22b4a58ea2868 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -4493,18 +4493,17 @@ Handle<JSPromise> Factory::NewJSPromiseWithoutHook() {
   Handle<JSPromise> promise =
       Cast<JSPromise>(NewJSObject(isolate()->promise_function()));
   DisallowGarbageCollection no_gc;
-  Tagged<JSPromise> raw = *promise;
-  raw->set_reactions_or_result(Smi::zero(), SKIP_WRITE_BARRIER);
+  promise->set_reactions_or_result(Smi::zero(), SKIP_WRITE_BARRIER);
   if (!isolate()->has_promise_context_tag()) {
-    raw->set_context_tag(Smi::zero(), SKIP_WRITE_BARRIER);
+    promise->set_context_tag(Smi::zero(), SKIP_WRITE_BARRIER);
   } else {
-    raw->set_context_tag(isolate()->promise_context_tag());
+    promise->set_context_tag(*isolate()->promise_context_tag());
   }
 
-  raw->set_flags(0);
+  promise->set_flags(0);
   // TODO(v8) remove once embedder data slots are always zero-initialized.
   InitEmbedderFields(*promise, Smi::zero());
-  DCHECK_EQ(raw->GetEmbedderFieldCount(), v8::Promise::kEmbedderFieldCount);
+  DCHECK_EQ(promise->GetEmbedderFieldCount(), v8::Promise::kEmbedderFieldCount);
   return promise;
 }
 
diff --git a/src/objects/js-promise.h b/src/objects/js-promise.h
index 056b539ac19ecaa703c6e0bf37937c5bd4546301..8e0ebcf758598933fc98bdb817e92f328a36f033 100644
--- a/src/objects/js-promise.h
+++ b/src/objects/js-promise.h
@@ -82,6 +82,11 @@ class JSPromise
   static_assert(v8::Promise::kFulfilled == 1);
   static_assert(v8::Promise::kRejected == 2);
 
+  static void ContinueTriggerPromiseReactions(Isolate* isolate,
+                                              DirectHandle<Object> reactions,
+                                              DirectHandle<Object> argument,
+                                              PromiseReaction::Type type);
+
  private:
   // ES section #sec-triggerpromisereactions
   static Handle<Object> TriggerPromiseReactions(Isolate* isolate,
diff --git a/src/objects/objects.cc b/src/objects/objects.cc
index 20e591323619a840ba5891d8a73d3f8b305a9e65..91e6e05d96a0ede91ad30f5a1068d87a533cad0c 100644
--- a/src/objects/objects.cc
+++ b/src/objects/objects.cc
@@ -4968,6 +4968,23 @@ Handle<Object> JSPromise::Fulfill(DirectHandle<JSPromise> promise,
   // 6. Set promise.[[PromiseState]] to "fulfilled".
   promise->set_status(Promise::kFulfilled);
 
+  Handle<Object> obj(promise->context_tag(), isolate);
+  bool needs_promise_context_switch =
+      !(*obj == Smi::zero() ||
+        obj.is_identical_to(isolate->promise_context_tag()) ||
+        !isolate->has_promise_context_resolve_callback());
+  if (needs_promise_context_switch) {
+    if (isolate->RunPromiseCrossContextResolveCallback(
+        reinterpret_cast<v8::Isolate*>(isolate),
+        Cast<JSObject>(obj),
+        reactions,
+        value,
+        PromiseReaction::kFulfill).IsNothing()) {
+      return {};
+    }
+    return isolate->factory()->undefined_value();
+  }
+
   // 7. Return TriggerPromiseReactions(reactions, value).
   return TriggerPromiseReactions(isolate, reactions, value,
                                  PromiseReaction::kFulfill);
@@ -5026,6 +5043,23 @@ Handle<Object> JSPromise::Reject(DirectHandle<JSPromise> promise,
     isolate->ReportPromiseReject(promise, reason, kPromiseRejectWithNoHandler);
   }
 
+  Handle<Object> obj(promise->context_tag(), isolate);
+  bool needs_promise_context_switch =
+      !(*obj == Smi::zero() ||
+        obj.is_identical_to(isolate->promise_context_tag()) ||
+        !isolate->has_promise_context_resolve_callback());
+  if (needs_promise_context_switch) {
+    if (isolate->RunPromiseCrossContextResolveCallback(
+        reinterpret_cast<v8::Isolate*>(isolate),
+        Cast<JSObject>(obj),
+        reactions,
+        reason,
+        PromiseReaction::kReject).IsNothing()) {
+      return {};
+    }
+    return isolate->factory()->undefined_value();
+  }
+
   // 8. Return TriggerPromiseReactions(reactions, reason).
   return TriggerPromiseReactions(isolate, reactions, reason,
                                  PromiseReaction::kReject);
@@ -5129,6 +5163,15 @@ MaybeHandle<Object> JSPromise::Resolve(DirectHandle<JSPromise> promise,
 }
 
 // static
+
+void JSPromise::ContinueTriggerPromiseReactions(
+    Isolate* isolate,
+    DirectHandle<Object> reactions,
+    DirectHandle<Object> argument,
+    PromiseReaction::Type type) {
+  TriggerPromiseReactions(isolate, reactions, argument, type);
+}
+
 Handle<Object> JSPromise::TriggerPromiseReactions(
     Isolate* isolate, DirectHandle<Object> reactions,
     DirectHandle<Object> argument, PromiseReaction::Type type) {
diff --git a/src/roots/roots.h b/src/roots/roots.h
index bbd62fb99d4589b1ceb92f8585b2001f0baa499c..e158891b09fbf037abcea8f8f926cc06e92899e4 100644
--- a/src/roots/roots.h
+++ b/src/roots/roots.h
@@ -416,7 +416,8 @@ class RootVisitor;
   V(FunctionTemplateInfo, error_stack_getter_fun_template,                  \
     ErrorStackGetterSharedFun)                                              \
   V(FunctionTemplateInfo, error_stack_setter_fun_template,                  \
-    ErrorStackSetterSharedFun)
+    ErrorStackSetterSharedFun)                                              \
+  V(Object, promise_context_tag, PromiseContextTag)
 
 // Entries in this list are limited to Smis and are not visited during GC.
 #define SMI_ROOT_LIST(V)                                                       \
diff --git a/src/runtime/runtime-promise.cc b/src/runtime/runtime-promise.cc
index 9142039e4f6b52727e6e590807618c5f03ba22b9..308a0d5bddc1c107ce3a3f9be8dd7877553432d1 100644
--- a/src/runtime/runtime-promise.cc
+++ b/src/runtime/runtime-promise.cc
@@ -133,8 +133,10 @@ RUNTIME_FUNCTION(Runtime_RejectPromise) {
   DirectHandle<JSPromise> promise = args.at<JSPromise>(0);
   DirectHandle<Object> reason = args.at(1);
   DirectHandle<Boolean> debug_event = args.at<Boolean>(2);
-  return *JSPromise::Reject(promise, reason,
+  Handle<Object> result = JSPromise::Reject(promise, reason,
                             Object::BooleanValue(*debug_event, isolate));
+  RETURN_FAILURE_IF_EXCEPTION(isolate);
+  return *result;
 }
 
 RUNTIME_FUNCTION(Runtime_ResolvePromise) {
@@ -222,8 +224,8 @@ RUNTIME_FUNCTION(Runtime_PromiseContextInit) {
   if (!isolate->has_promise_context_tag()) {
     args.at<JSPromise>(0)->set_context_tag(Smi::zero());
   } else {
-    CHECK(!IsUndefined(isolate->promise_context_tag()));
-    args.at<JSPromise>(0)->set_context_tag(isolate->promise_context_tag());
+    CHECK(!IsUndefined(*isolate->promise_context_tag()));
+    args.at<JSPromise>(0)->set_context_tag(*isolate->promise_context_tag());
   }
   return ReadOnlyRoots(isolate).undefined_value();
 }
@@ -237,8 +239,8 @@ RUNTIME_FUNCTION(Runtime_PromiseContextCheck) {
   // If promise.context_tag() is strict equal to isolate.promise_context_tag(),
   // or if the promise being checked does not have a context tag, we'll just return
   // promise directly.
-  Tagged<Object> obj = promise->context_tag();
-  if (obj == Smi::zero() || obj == isolate->promise_context_tag()) {
+  Handle<Object> obj(promise->context_tag(), isolate);
+  if (*obj == Smi::zero() || obj.is_identical_to(isolate->promise_context_tag())) {
     return *promise;
   }
 
@@ -251,5 +253,23 @@ RUNTIME_FUNCTION(Runtime_PromiseContextCheck) {
   return *result;
 }
 
+RUNTIME_FUNCTION(Runtime_PromiseResolveContextCheck) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+  Handle<JSPromise> promise = args.at<JSPromise>(0);
+  // If promise.context_tag() is strict equal to isolate.promise_context_tag(),
+  // or if the promise being checked does not have a context tag, or if the
+  // resolve callback has not been set, we'll just return false here to indicate
+  // that the default handling should be used.
+  Handle<Object> obj(promise->context_tag(), isolate);
+  if (*obj == Smi::zero() ||
+      obj.is_identical_to(isolate->promise_context_tag()) ||
+      !isolate->has_promise_context_resolve_callback()) {
+    return isolate->heap()->ToBoolean(false);
+  }
+
+  return isolate->heap()->ToBoolean(true);
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index 10809df3bf2184587b04bf0b8bd1c98e61a80802..65f364b45a953331e847fa14aaab737f30237a0c 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -431,7 +431,8 @@ namespace internal {
   F(ConstructAggregateErrorHelper, 4, 1) \
   F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1) \
   F(PromiseContextInit, 1, 1)            \
-  F(PromiseContextCheck, 1, 1)
+  F(PromiseContextCheck, 1, 1)           \
+  F(PromiseResolveContextCheck, 1, 1)
 
 #define FOR_EACH_INTRINSIC_PROXY(F, I) \
   F(CheckProxyGetSetTrapResult, 2, 1)  \
