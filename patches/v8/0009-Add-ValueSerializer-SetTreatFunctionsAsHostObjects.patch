From 21d6fe20905826c0c3ad736033c19f1d51ef7322 Mon Sep 17 00:00:00 2001
From: Kenton Varda <kenton@cloudflare.com>
Date: Sat, 2 Mar 2024 09:00:18 -0600
Subject: Add ValueSerializer::SetTreatFunctionsAsHostObjects().

Previously, ValueSerializer would always refuse to serialize functions. This commit gives the embedder the option to handle them as host objects.

This is intended for use in an RPC system, where a function can be "serialized" by replacing it with a stub which, when invoked, performs an RPC back to the originating isolate in order to execute the original function there.

diff --git a/include/v8-value-serializer.h b/include/v8-value-serializer.h
index 596be18adeb3a5a81794aaa44b1d347dec6c0c7d..141f138e08de849e3e02b3b2b346e643b9e40c70 100644
--- a/include/v8-value-serializer.h
+++ b/include/v8-value-serializer.h
@@ -195,6 +195,15 @@ class V8_EXPORT ValueSerializer {
    */
   void SetTreatArrayBufferViewsAsHostObjects(bool mode);
 
+  /**
+   * Indicate whether to treat Functions as host objects,
+   * i.e. pass them to Delegate::WriteHostObject. This should not be
+   * called when no Delegate was passed.
+   *
+   * The default is not to treat Functions as host objects.
+   */
+  void SetTreatFunctionsAsHostObjects(bool mode);
+
   /**
    * Write raw data in various common formats to the buffer.
    * Note that integer types are written in base-128 varint format, not with a
diff --git a/src/api/api.cc b/src/api/api.cc
index 18e131b04e9d86f95c8263d736b680a2ac7f64e3..e44379fd53524a637bdab085e542af25bc055787 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -3515,6 +3515,10 @@ void ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool mode) {
   private_->serializer.SetTreatArrayBufferViewsAsHostObjects(mode);
 }
 
+void ValueSerializer::SetTreatFunctionsAsHostObjects(bool mode) {
+  private_->serializer.SetTreatFunctionsAsHostObjects(mode);
+}
+
 Maybe<bool> ValueSerializer::WriteValue(Local<Context> context,
                                         Local<Value> value) {
   auto i_isolate = reinterpret_cast<i::Isolate*>(context->GetIsolate());
diff --git a/src/objects/value-serializer.cc b/src/objects/value-serializer.cc
index 1b3dcf71d4c682ff2db23718ee54b86121f1f1c8..13f07a5314f10d806822a138ed1faf29890fa7aa 100644
--- a/src/objects/value-serializer.cc
+++ b/src/objects/value-serializer.cc
@@ -328,6 +328,10 @@ void ValueSerializer::SetTreatArrayBufferViewsAsHostObjects(bool mode) {
   treat_array_buffer_views_as_host_objects_ = mode;
 }
 
+void ValueSerializer::SetTreatFunctionsAsHostObjects(bool mode) {
+  treat_functions_as_host_objects_ = mode;
+}
+
 void ValueSerializer::WriteTag(SerializationTag tag) {
   uint8_t raw_tag = static_cast<uint8_t>(tag);
   WriteRawBytes(&raw_tag, sizeof(raw_tag));
@@ -596,8 +600,13 @@ Maybe<bool> ValueSerializer::WriteJSReceiver(Handle<JSReceiver> receiver) {
 
   // Eliminate callable and exotic objects, which should not be serialized.
   InstanceType instance_type = receiver->map()->instance_type();
-  if (IsCallable(*receiver) || (IsSpecialReceiverInstanceType(instance_type) &&
-                                instance_type != JS_SPECIAL_API_OBJECT_TYPE)) {
+  if (IsCallable(*receiver)) {
+    if (treat_functions_as_host_objects_) {
+      return WriteHostObject(Cast<JSObject>(receiver));
+    }
+    return ThrowDataCloneError(MessageTemplate::kDataCloneError, receiver);
+  } else if (IsSpecialReceiverInstanceType(instance_type) &&
+             instance_type != JS_SPECIAL_API_OBJECT_TYPE) {
     return ThrowDataCloneError(MessageTemplate::kDataCloneError, receiver);
   }
 
diff --git a/src/objects/value-serializer.h b/src/objects/value-serializer.h
index ec79ccae64617547239b2b48c01a2be6ce43d035..de1a8c71c6a0c22a10f82ce6cf3f6523343aac29 100644
--- a/src/objects/value-serializer.h
+++ b/src/objects/value-serializer.h
@@ -102,6 +102,15 @@ class ValueSerializer {
    */
   void SetTreatArrayBufferViewsAsHostObjects(bool mode);
 
+  /*
+   * Indicate whether to treat Functions as host objects,
+   * i.e. pass them to Delegate::WriteHostObject. This should not be
+   * called when no Delegate was passed.
+   *
+   * The default is not to treat Functions as host objects.
+   */
+  void SetTreatFunctionsAsHostObjects(bool mode);
+
  private:
   // Managing allocations of the internal buffer.
   Maybe<bool> ExpandBuffer(size_t required_capacity);
@@ -184,6 +193,7 @@ class ValueSerializer {
   size_t buffer_capacity_ = 0;
   bool has_custom_host_objects_ = false;
   bool treat_array_buffer_views_as_host_objects_ = false;
+  bool treat_functions_as_host_objects_ = false;
   bool out_of_memory_ = false;
   Zone zone_;
   uint32_t version_;
