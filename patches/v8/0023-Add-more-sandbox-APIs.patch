From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Erik Corry <erikcorry@chromium.org>
Date: Thu, 22 May 2025 12:38:43 +0200
Subject: Add more sandbox APIs.

This has already been upstreamed at
https://chromium-review.googlesource.com/c/v8/v8/+/6575561

diff --git a/include/v8-array-buffer.h b/include/v8-array-buffer.h
index 1d93457628cf0c41db510c4c06fd6a4e683a52dd..3e64ece5debda3951e7ca328762ab670937d0513 100644
--- a/include/v8-array-buffer.h
+++ b/include/v8-array-buffer.h
@@ -198,7 +198,7 @@ class V8_EXPORT ArrayBuffer : public Object {
      * Convenience allocator.
      *
      * When the sandbox is enabled, this allocator will allocate its backing
-     * memory inside the sandbox that belongs to passed isolate group.
+     * memory inside the sandbox that belongs to the passed isolate group.
      * Otherwise, it will rely on malloc/free.
      *
      * Caller takes ownership, i.e. the returned object needs to be freed using
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 6344e3bcb39f8c6658bd14ad5d3ef9db595a1fc6..2aea8bfc81ecda32e0774794390826341efecce7 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -253,6 +253,17 @@ class V8_EXPORT IsolateGroup {
     return !operator==(other);
   }
 
+#ifdef V8_ENABLE_SANDBOX
+  /**
+   * Whether the sandbox of the isolate group contains a given pointer.
+   * Will always return true if the sandbox is not enabled.
+   */
+  bool SandboxContains(void* pointer) const;
+  VirtualAddressSpace* GetSandboxAddressSpace();
+#else
+  V8_INLINE bool SandboxContains(void* pointer) const { return true; }
+#endif
+
  private:
   friend class Isolate;
   friend class ArrayBuffer::Allocator;
diff --git a/src/api/api.cc b/src/api/api.cc
index 7620d3765563c54883aedc345475c81b28efae46..2a2e3d59f6e1be026e46f4c43c85342e4ea3c146 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -9167,6 +9167,19 @@ std::unique_ptr<v8::BackingStore> v8::ArrayBuffer::NewBackingStore(
       static_cast<v8::BackingStore*>(backing_store.release()));
 }
 
+#ifdef V8_ENABLE_SANDBOX
+bool v8::IsolateGroup::SandboxContains(void* pointer) const {
+  return isolate_group_->sandbox()->Contains(pointer);
+}
+
+VirtualAddressSpace* v8::IsolateGroup::GetSandboxAddressSpace() {
+  i::Sandbox* sandbox = isolate_group_->sandbox();
+  Utils::ApiCheck(sandbox->is_initialized(), "v8::V8::GetSandboxAddressSpace",
+                  "The sandbox must be initialized first");
+  return sandbox->address_space();
+}
+#endif
+
 std::unique_ptr<v8::BackingStore> v8::ArrayBuffer::NewBackingStore(
     void* data, size_t byte_length, v8::BackingStore::DeleterCallback deleter,
     void* deleter_data) {
diff --git a/test/cctest/test-api.cc b/test/cctest/test-api.cc
index 90adbf2a0b12c79710d8c6f4ae28f8fe92c2991d..ad57bcb167426a1d2c2ba465d5006d8cb2e1c84a 100644
--- a/test/cctest/test-api.cc
+++ b/test/cctest/test-api.cc
@@ -13556,7 +13556,106 @@ UNINITIALIZED_TEST(TwoIsolateGroups) {
   TestAllocateAndNewForTwoIsolateGroups(create_params_1, create_params_2,
                                         groups[0], groups[1]);
 }
-#endif
+#endif  // defined(V8_COMPRESS_POINTERS) && \
+        // !defined(V8_COMPRESS_POINTERS_IN_SHARED_CAGE)
+
+#ifdef V8_ENABLE_SANDBOX
+
+class CustomArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
+ public:
+  explicit CustomArrayBufferAllocator(v8::IsolateGroup& group)
+      : group_(group), address_space_(group.GetSandboxAddressSpace()) {}
+
+  void* Allocate(size_t size) {
+    uintptr_t result = address_space_->AllocatePages(
+        0, kSIZE, kALIGN, v8::PagePermissions::kReadWrite);
+    allocated_address_ = reinterpret_cast<void*>(result);
+    return allocated_address_;
+  }
+
+  void* AllocateUninitialized(size_t size) {
+    uintptr_t result = address_space_->AllocatePages(
+        0, kSIZE, kALIGN, v8::PagePermissions::kReadWrite);
+    allocated_address_ = reinterpret_cast<void*>(result);
+    return allocated_address_;
+  }
+
+  void Free(void* p, size_t size) {
+    address_space_->FreePages(reinterpret_cast<uintptr_t>(p), kSIZE);
+  }
+
+  void* allocated_address() const { return allocated_address_; }
+
+ private:
+  static constexpr int kSIZE = 64 << 10;
+  static constexpr int kALIGN = 64 << 10;
+  v8::IsolateGroup group_;
+  v8::VirtualAddressSpace* address_space_;
+  void* allocated_address_ = nullptr;
+};
+
+#else  // def V8_ENABLE_SANDBOX
+
+class CustomArrayBufferAllocator : public v8::ArrayBuffer::Allocator {
+ public:
+  explicit CustomArrayBufferAllocator(v8::IsolateGroup& group) {}
+
+  void* Allocate(size_t size) {
+    void* result = malloc(size);
+    allocated_address_ = result;
+    return result;
+  }
+
+  void* AllocateUninitialized(size_t size) {
+    void* result = calloc(size, 1);
+    allocated_address_ = result;
+    return result;
+  }
+
+  void Free(void* p, size_t size) { free(p); }
+
+  void* allocated_address() const { return allocated_address_; }
+
+ private:
+  void* allocated_address_ = nullptr;
+};
+
+#endif  // def V8_ENABLE_SANDBOX
+
+UNINITIALIZED_TEST(SandboxContains) {
+  v8::IsolateGroup group1 = v8::IsolateGroup::GetDefault();
+  v8::IsolateGroup group2 = v8::IsolateGroup::CanCreateNewGroups()
+                                ? v8::IsolateGroup::Create()
+                                : v8::IsolateGroup::GetDefault();
+
+  CustomArrayBufferAllocator allocator1(group1);
+  CustomArrayBufferAllocator allocator2(group2);
+
+  v8::Isolate::CreateParams create_params_1;
+  create_params_1.array_buffer_allocator = &allocator1;
+  v8::Isolate::CreateParams create_params_2;
+  create_params_2.array_buffer_allocator = &allocator2;
+
+  TestAllocateAndNewForTwoIsolateGroups(create_params_1, create_params_2,
+                                        group1, group2);
+
+  constexpr int SIZE = 200;
+
+  void* p1 = allocator1.Allocate(SIZE);
+  void* p2 = allocator2.Allocate(SIZE);
+
+  CHECK_EQ(p1, allocator1.allocated_address());
+  CHECK_EQ(p2, allocator2.allocated_address());
+  CHECK(group1.SandboxContains(p1));
+  CHECK(group2.SandboxContains(p2));
+  if (v8::IsolateGroup::CanCreateNewGroups()) {
+    CHECK(!group1.SandboxContains(p2));
+    CHECK(!group2.SandboxContains(p1));
+  }
+
+  allocator1.Free(p1, SIZE);
+  allocator2.Free(p2, SIZE);
+}
 
 unsigned ApiTestFuzzer::linear_congruential_generator;
 std::vector<std::unique_ptr<ApiTestFuzzer>> ApiTestFuzzer::fuzzers_;
