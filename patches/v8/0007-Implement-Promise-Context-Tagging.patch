From a68963663c21262b676410b5e1577df39f4e40c3 Mon Sep 17 00:00:00 2001
From: Erik Corry <erikcorry@chromium.org>
Date: Wed, 21 Aug 2024 16:29:43 +0200
Subject: Implement Promise Context Tagging


diff --git a/include/v8-callbacks.h b/include/v8-callbacks.h
index 567b36faf63ddb758ae402dc0d47b5596b7f93ac..6add89ac1837df03a71539801ab513e098e73722 100644
--- a/include/v8-callbacks.h
+++ b/include/v8-callbacks.h
@@ -454,6 +454,15 @@ using FilterETWSessionByURLCallback =
     bool (*)(Local<Context> context, const std::string& etw_filter_payload);
 #endif  // V8_OS_WIN
 
+/**
+ * PromiseCrossContextCallback is called when following a promise and the
+ * promise's context tag is not strictly equal to the isolate's current
+ * promise context tag.
+ */
+using PromiseCrossContextCallback = MaybeLocal<Promise> (*)(Local<Context> context,
+                                                            Local<Promise> promise,
+                                                            Local<Object> tag);
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_CALLBACKS_H_
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 54571391fb8227e7d5feb63c219f396a5d39e6f2..96b7d9feb20d4ef1b5ba2da56d9635688da2457c 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -1731,6 +1731,9 @@ class V8_EXPORT Isolate {
    */
   std::string GetDefaultLocale();
 
+  class PromiseContextScope;
+  void SetPromiseCrossContextCallback(PromiseCrossContextCallback callback);
+
   Isolate() = delete;
   ~Isolate() = delete;
   Isolate(const Isolate&) = delete;
@@ -1775,6 +1778,19 @@ MaybeLocal<T> Isolate::GetDataFromSnapshotOnce(size_t index) {
   return {};
 }
 
+class Isolate::PromiseContextScope {
+public:
+  PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag);
+  ~PromiseContextScope();
+  PromiseContextScope(const PromiseContextScope&) = delete;
+  PromiseContextScope(PromiseContextScope&&) = delete;
+  PromiseContextScope& operator=(const PromiseContextScope&) = delete;
+  PromiseContextScope& operator=(PromiseContextScope&&) = delete;
+
+private:
+  internal::Isolate* isolate_;
+};
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_H_
diff --git a/src/api/api.cc b/src/api/api.cc
index 7058f9a13cb73cbbd0602ddeb589268306ee45ea..806357781fd97bb4767b2120bc5cc20607e86f07 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -12236,6 +12236,23 @@ std::string SourceLocation::ToString() const {
   return std::string(function_) + "@" + file_ + ":" + std::to_string(line_);
 }
 
+void Isolate::SetPromiseCrossContextCallback(PromiseCrossContextCallback callback) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  isolate->set_promise_cross_context_callback(callback);
+}
+
+Isolate::PromiseContextScope::PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag)
+    : isolate_(reinterpret_cast<i::Isolate*>(isolate)) {
+  DCHECK(!isolate_->has_promise_context_tag());
+  DCHECK(!tag.IsEmpty());
+  i::Handle<i::Object> handle = Utils::OpenHandle(*tag);
+  isolate_->set_promise_context_tag(*handle);
+}
+
+Isolate::PromiseContextScope::~PromiseContextScope() {
+  isolate_->clear_promise_context_tag();
+}
+
 }  // namespace v8
 
 EXPORT_CONTEXTUAL_VARIABLE(v8::internal::StackAllocatedCheck)
diff --git a/src/builtins/promise-abstract-operations.tq b/src/builtins/promise-abstract-operations.tq
index f4e17456651516dfb3e81880da82ab228646ccfd..6142e0450dac646ccebd3fc7c5168f9b42b4d0b5 100644
--- a/src/builtins/promise-abstract-operations.tq
+++ b/src/builtins/promise-abstract-operations.tq
@@ -20,6 +20,9 @@ extern transitioning runtime PromiseResolveAfterResolved(
 
 extern transitioning runtime PromiseRejectEventFromStack(
     implicit context: Context)(JSPromise, JSAny): JSAny;
+
+extern transitioning runtime PromiseContextCheck(
+    implicit context: Context)(JSPromise): JSPromise;
 }
 
 // https://tc39.es/ecma262/#sec-promise-abstract-operations
@@ -457,12 +460,14 @@ transitioning macro PerformPromiseThenImpl(
     // PromiseReaction holding both the onFulfilled and onRejected callbacks.
     // Once the {promise} is resolved we decide on the concrete handler to
     // push onto the microtask queue.
+    const delegate = runtime::PromiseContextCheck(promise);
     const promiseReactions =
-        UnsafeCast<(Zero | PromiseReaction)>(promise.reactions_or_result);
+        UnsafeCast<(Zero | PromiseReaction)>(delegate.reactions_or_result);
 
     const reaction = NewPromiseReaction(
         promiseReactions, resultPromiseOrCapability, onFulfilled, onRejected);
-    promise.reactions_or_result = reaction;
+    delegate.reactions_or_result = reaction;
+    delegate.SetHasHandler();
   } else {
     const reactionsOrResult = promise.reactions_or_result;
     let microtask: PromiseReactionJobTask;
@@ -484,8 +489,8 @@ transitioning macro PerformPromiseThenImpl(
         }
       }
     EnqueueMicrotask(handlerContext, microtask);
+    promise.SetHasHandler();
   }
-  promise.SetHasHandler();
 }
 
 transitioning javascript builtin PerformPromiseThenFunction(
diff --git a/src/builtins/promise-constructor.tq b/src/builtins/promise-constructor.tq
index 7ace785675fe1b8ae005a1c38f9c0c32e41ac7f3..88efee16b51a6e26bd20fc4ed1222091cac8670b 100644
--- a/src/builtins/promise-constructor.tq
+++ b/src/builtins/promise-constructor.tq
@@ -8,6 +8,9 @@
 namespace runtime {
 extern transitioning runtime PromiseHookInit(
     implicit context: Context)(Object, Object): JSAny;
+
+extern transitioning runtime PromiseContextInit(
+    implicit context: Context)(JSPromise): JSAny;
 }
 
 // https://tc39.es/ecma262/#sec-promise-constructor
@@ -65,6 +68,7 @@ transitioning javascript builtin PromiseConstructor(
     result = UnsafeCast<JSPromise>(
         FastNewObject(context, promiseFun, UnsafeCast<JSReceiver>(newTarget)));
     PromiseInit(result);
+    runtime::PromiseContextInit(result);
     RunAnyPromiseHookInit(result, Undefined);
   }
 
diff --git a/src/builtins/promise-misc.tq b/src/builtins/promise-misc.tq
index 1f90230bcafe424b2260598906cc7586f5406848..44ff23634e5a91498736fa2a15b324b23f6abde5 100644
--- a/src/builtins/promise-misc.tq
+++ b/src/builtins/promise-misc.tq
@@ -55,6 +55,7 @@ macro PromiseInit(promise: JSPromise): void {
     is_silent: false,
     async_task_id: kInvalidAsyncTaskId
   });
+  promise.context_tag = kZero;
   promise_internal::ZeroOutEmbedderOffsets(promise);
 }
 
@@ -74,6 +75,7 @@ macro InnerNewJSPromise(implicit context: Context)(): JSPromise {
     is_silent: false,
     async_task_id: kInvalidAsyncTaskId
   });
+  promise.context_tag = kZero;
   return promise;
 }
 
@@ -273,6 +275,7 @@ transitioning macro NewJSPromise(implicit context: Context)(parent: Object):
     JSPromise {
   const instance = InnerNewJSPromise();
   PromiseInit(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, parent);
   return instance;
 }
@@ -296,6 +299,7 @@ transitioning macro NewJSPromise(
   instance.reactions_or_result = result;
   instance.SetStatus(status);
   promise_internal::ZeroOutEmbedderOffsets(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, Undefined);
   return instance;
 }
diff --git a/src/compiler/js-create-lowering.cc b/src/compiler/js-create-lowering.cc
index c8b5eade2b55ac6f09c49bdef24553e0a1dd57d6..180a510241685b469ca25f59ce4b2d2f506cad78 100644
--- a/src/compiler/js-create-lowering.cc
+++ b/src/compiler/js-create-lowering.cc
@@ -1115,10 +1115,12 @@ Reduction JSCreateLowering::ReduceJSCreatePromise(Node* node) {
           jsgraph()->EmptyFixedArrayConstant());
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kReactionsOrResultOffset),
           jsgraph()->ZeroConstant());
+  a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kContextTagOffset),
+          jsgraph()->ZeroConstant());
   static_assert(v8::Promise::kPending == 0);
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kFlagsOffset),
           jsgraph()->ZeroConstant());
-  static_assert(JSPromise::kHeaderSize == 5 * kTaggedSize);
+  static_assert(JSPromise::kHeaderSize == 6 * kTaggedSize);
   for (int offset = JSPromise::kHeaderSize;
        offset < JSPromise::kSizeWithEmbedderFields; offset += kTaggedSize) {
     a.Store(AccessBuilder::ForJSObjectOffset(offset),
diff --git a/src/diagnostics/objects-printer.cc b/src/diagnostics/objects-printer.cc
index c5155e859d37ddd9510d4129e4307dc027f959b3..21a7b74cf03164901ca08fa9e17ae7d8ac207b35 100644
--- a/src/diagnostics/objects-printer.cc
+++ b/src/diagnostics/objects-printer.cc
@@ -846,6 +846,7 @@ void JSPromise::JSPromisePrint(std::ostream& os) {
   }
   os << "\n - has_handler: " << has_handler();
   os << "\n - is_silent: " << is_silent();
+  os << "\n - context_tag: " << Brief(context_tag());
   JSObjectPrintBody(os, *this);
 }
 
diff --git a/src/execution/isolate-inl.h b/src/execution/isolate-inl.h
index f81666ddd2f513a9a1f39b9e486b451bf3c7574d..9e0969460fd33d8cc893e04d3418e1cbed01d6a0 100644
--- a/src/execution/isolate-inl.h
+++ b/src/execution/isolate-inl.h
@@ -134,6 +134,26 @@ bool Isolate::is_execution_terminating() {
          i::ReadOnlyRoots(this).termination_exception();
 }
 
+Tagged<Object> Isolate::promise_context_tag() {
+  return promise_context_tag_;
+}
+
+bool Isolate::has_promise_context_tag() {
+  return promise_context_tag_ != ReadOnlyRoots(this).the_hole_value();
+}
+
+void Isolate::clear_promise_context_tag() {
+  set_promise_context_tag(ReadOnlyRoots(this).the_hole_value());
+}
+
+void Isolate::set_promise_context_tag(Tagged<Object> tag) {
+  promise_context_tag_ = tag;
+}
+
+void Isolate::set_promise_cross_context_callback(PromiseCrossContextCallback callback) {
+  promise_cross_context_callback_ = callback;
+}
+
 #ifdef DEBUG
 Tagged<Object> Isolate::VerifyBuiltinsResult(Tagged<Object> result) {
   if (is_execution_terminating() && !v8_flags.strict_termination_checks) {
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index 8aa0766efb27b6e5f4212c4ba489ad58fe00be56..d093aad3a30c8a6c04e1c7cf2b2ea0d8afc03e5b 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -599,6 +599,8 @@ void Isolate::Iterate(RootVisitor* v, ThreadLocalTop* thread) {
                       FullObjectSlot(&thread->pending_message_));
   v->VisitRootPointer(Root::kStackRoots, nullptr,
                       FullObjectSlot(&thread->context_));
+  v->VisitRootPointer(Root::kStackRoots, nullptr,
+                      FullObjectSlot(&promise_context_tag_));
 
   for (v8::TryCatch* block = thread->try_catch_handler_; block != nullptr;
        block = block->next_) {
@@ -5588,6 +5590,7 @@ bool Isolate::Init(SnapshotData* startup_snapshot_data,
     shared_heap_object_cache_.push_back(ReadOnlyRoots(this).undefined_value());
   }
 
+  clear_promise_context_tag();
   InitializeThreadLocal();
 
   // Profiler has to be created after ThreadLocal is initialized
@@ -7479,5 +7482,39 @@ void Isolate::InitializeBuiltinJSDispatchTable() {
 #endif
 }
 
+class Isolate::PromiseCrossContextCallbackScope {
+public:
+  PromiseCrossContextCallbackScope(Isolate& isolate) : isolate_(isolate) {
+    DCHECK(!isolate_.in_promise_cross_context_callback_);
+    isolate_.in_promise_cross_context_callback_ = true;
+  }
+  ~PromiseCrossContextCallbackScope() {
+    isolate_.in_promise_cross_context_callback_ = false;
+  }
+private:
+  Isolate& isolate_;
+};
+
+MaybeHandle<JSPromise> Isolate::RunPromiseCrossContextCallback(Handle<NativeContext> context,
+                                                               Handle<JSPromise> promise) {
+  if (promise_cross_context_callback_ == nullptr || in_promise_cross_context_callback_) {
+    return promise;
+  }
+  PromiseCrossContextCallbackScope callback_scope(*this);
+  CHECK(IsJSReceiver(promise->context_tag()));
+
+  Handle<JSObject> context_tag(Cast<JSObject>(promise->context_tag()), this);
+  v8::Local<v8::Promise> result;
+  API_ASSIGN_RETURN_ON_EXCEPTION_VALUE (
+      this, result,
+      promise_cross_context_callback_(
+          Utils::ToLocal(context),
+          v8::Utils::PromiseToLocal(promise),
+          v8::Utils::ToLocal(context_tag)),
+      MaybeHandle<JSPromise>());
+
+  return v8::Utils::OpenHandle(*result);
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index d6060d7068ee3820eace6b3a7a015108d65960b5..7de738063bdddead3762aded57fbbd388eef950f 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -2266,6 +2266,14 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
                                        v8::ExceptionContext callback_kind);
   void SetExceptionPropagationCallback(ExceptionPropagationCallback callback);
 
+  inline Tagged<Object> promise_context_tag();
+  inline bool has_promise_context_tag();
+  inline void clear_promise_context_tag();
+  inline void set_promise_context_tag(Tagged<Object> tag);
+  inline void set_promise_cross_context_callback(PromiseCrossContextCallback callback);
+  MaybeHandle<JSPromise> RunPromiseCrossContextCallback(Handle<NativeContext> context,
+                                                        Handle<JSPromise> promise);
+
 #ifdef V8_ENABLE_WASM_SIMD256_REVEC
   void set_wasm_revec_verifier_for_test(
       compiler::turboshaft::WasmRevecVerifier* verifier) {
@@ -2778,12 +2786,19 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   int current_thread_counter_ = 0;
 #endif
 
+  Tagged<Object> promise_context_tag_;
+  PromiseCrossContextCallback promise_cross_context_callback_;
+  bool in_promise_cross_context_callback_ = false;
+
+  class PromiseCrossContextCallbackScope;
+
   friend class heap::HeapTester;
   friend class GlobalSafepoint;
   friend class TestSerializer;
   friend class SharedHeapNoClientsTest;
   friend class IsolateForPointerCompression;
   friend class IsolateForSandbox;
+  friend class PromiseCrossContextCallbackScope;
 };
 
 // The current entered Isolate and its thread data. Do not access these
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index e26d18c63693bb89f38c79780df5836f1540fbe0..1d631dde7b3234f6d3639a8f49410e908126f6d6 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -4429,6 +4429,12 @@ Handle<JSPromise> Factory::NewJSPromiseWithoutHook() {
   DisallowGarbageCollection no_gc;
   Tagged<JSPromise> raw = *promise;
   raw->set_reactions_or_result(Smi::zero(), SKIP_WRITE_BARRIER);
+  if (!isolate()->has_promise_context_tag()) {
+    raw->set_context_tag(Smi::zero(), SKIP_WRITE_BARRIER);
+  } else {
+    raw->set_context_tag(isolate()->promise_context_tag());
+  }
+
   raw->set_flags(0);
   // TODO(v8) remove once embedder data slots are always zero-initialized.
   InitEmbedderFields(*promise, Smi::zero());
diff --git a/src/objects/js-promise.tq b/src/objects/js-promise.tq
index 93a4a34f9f1f7fad40611d4b9432aaf944c9fbae..188619ea64c9e307f014898e4023ce796c52c7e2 100644
--- a/src/objects/js-promise.tq
+++ b/src/objects/js-promise.tq
@@ -32,6 +32,7 @@ extern class JSPromise extends JSObjectWithEmbedderSlots {
   // Smi 0 terminated list of PromiseReaction objects in case the JSPromise was
   // not settled yet, otherwise the result.
   reactions_or_result: Zero|PromiseReaction|JSAny;
+  context_tag: Object;
   flags: SmiTagged<JSPromiseFlags>;
 }
 
diff --git a/src/profiler/heap-snapshot-generator.cc b/src/profiler/heap-snapshot-generator.cc
index 5b7a1fe859f252ec03d42bb9eb7ab438e0b6a6d7..1671f284c8439d6eeff757f927ae62de9e90c1e5 100644
--- a/src/profiler/heap-snapshot-generator.cc
+++ b/src/profiler/heap-snapshot-generator.cc
@@ -1936,6 +1936,9 @@ void V8HeapExplorer::ExtractJSPromiseReferences(HeapEntry* entry,
   SetInternalReference(entry, "reactions_or_result",
                        promise->reactions_or_result(),
                        JSPromise::kReactionsOrResultOffset);
+  SetInternalReference(entry, "context_tag",
+                       promise->context_tag(),
+                       JSPromise::kContextTagOffset);
 }
 
 void V8HeapExplorer::ExtractJSGeneratorObjectReferences(
diff --git a/src/runtime/runtime-promise.cc b/src/runtime/runtime-promise.cc
index 20ba437b34afd13bc0e43e87785544160b5c109b..4fbdf90319c5fc3b3e6f60aaf1b12a33c5f537ea 100644
--- a/src/runtime/runtime-promise.cc
+++ b/src/runtime/runtime-promise.cc
@@ -216,5 +216,40 @@ RUNTIME_FUNCTION(Runtime_ConstructSuppressedError) {
   return *result;
 }
 
+RUNTIME_FUNCTION(Runtime_PromiseContextInit) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+  if (!isolate->has_promise_context_tag()) {
+    args.at<JSPromise>(0)->set_context_tag(Smi::zero());
+  } else {
+    CHECK(!IsUndefined(isolate->promise_context_tag()));
+    args.at<JSPromise>(0)->set_context_tag(isolate->promise_context_tag());
+  }
+  return ReadOnlyRoots(isolate).undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_PromiseContextCheck) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+
+  Handle<JSPromise> promise = args.at<JSPromise>(0);
+
+  // If promise.context_tag() is strict equal to isolate.promise_context_tag(),
+  // or if the promise being checked does not have a context tag, we'll just return
+  // promise directly.
+  Tagged<Object> obj = promise->context_tag();
+  if (obj == Smi::zero() || obj == isolate->promise_context_tag()) {
+    return *promise;
+  }
+
+  // Otherwise we defer to the PromiseCrossContextCallback. If the callback
+  // has not been set, then it should just return the same promise back here.
+  Handle<JSPromise> result;
+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(isolate, result,
+    isolate->RunPromiseCrossContextCallback(isolate->native_context(), promise));
+
+  return *result;
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index 6088fced3a07b63a008b1d8b20597c8f12e06aa8..d23446cbeee65b50cab694dc60743b4ab7f9c1d7 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -403,7 +403,9 @@ namespace internal {
   F(PromiseResolveAfterResolved, 2, 1)   \
   F(ConstructSuppressedError, 3, 1)      \
   F(ConstructAggregateErrorHelper, 4, 1) \
-  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1)
+  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1) \
+  F(PromiseContextInit, 1, 1)            \
+  F(PromiseContextCheck, 1, 1)
 
 #define FOR_EACH_INTRINSIC_PROXY(F, I) \
   F(CheckProxyGetSetTrapResult, 2, 1)  \
