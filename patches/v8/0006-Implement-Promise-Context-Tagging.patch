From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: James M Snell <jasnell@gmail.com>
Date: Thu, 22 Jun 2023 15:29:26 -0700
Subject: Implement Promise Context Tagging


diff --git a/include/v8-callbacks.h b/include/v8-callbacks.h
index 920e4e25f10cdc6add9f74453575dcf793c1f0d5..7ccb6d08f440d805c829d1efd099cf4359e756a0 100644
--- a/include/v8-callbacks.h
+++ b/include/v8-callbacks.h
@@ -519,6 +519,14 @@ using FilterETWSessionByURL2Callback = FilterETWSessionByURLResult (*)(
     Local<Context> context, const std::string& etw_filter_payload);
 #endif  // V8_OS_WIN
 
+/**
+ * PromiseCrossContextCallback is called when following a promise and the
+ * promise's context tag is not strictly equal to the isolate's current
+ * promise context tag.
+ */
+using PromiseCrossContextCallback = MaybeLocal<Promise> (*)(
+    Local<Context> context, Local<Promise> promise, Local<Object> tag);
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_CALLBACKS_H_
diff --git a/include/v8-isolate.h b/include/v8-isolate.h
index 16c61f605f9909dafba169948ce15d883fa7cfbe..abfb1ad3b0b0e9d9466cd385b5207cbf28e2e14d 100644
--- a/include/v8-isolate.h
+++ b/include/v8-isolate.h
@@ -1853,6 +1853,9 @@ class V8_EXPORT Isolate {
    */
   uint64_t GetHashSeed();
 
+  class PromiseContextScope;
+  void SetPromiseCrossContextCallback(PromiseCrossContextCallback callback);
+
   Isolate() = delete;
   ~Isolate() = delete;
   Isolate(const Isolate&) = delete;
@@ -1900,6 +1903,19 @@ MaybeLocal<T> Isolate::GetDataFromSnapshotOnce(size_t index) {
   return {};
 }
 
+class Isolate::PromiseContextScope {
+ public:
+  PromiseContextScope(Isolate* isolate, v8::Local<v8::Object> tag);
+  ~PromiseContextScope();
+  PromiseContextScope(const PromiseContextScope&) = delete;
+  PromiseContextScope(PromiseContextScope&&) = delete;
+  PromiseContextScope& operator=(const PromiseContextScope&) = delete;
+  PromiseContextScope& operator=(PromiseContextScope&&) = delete;
+
+ private:
+  internal::Isolate* isolate_;
+};
+
 }  // namespace v8
 
 #endif  // INCLUDE_V8_ISOLATE_H_
diff --git a/src/api/api.cc b/src/api/api.cc
index 5878974fb70297c2aef4a5d28740058e468b947a..111def335e53fabb6ce6ac0b2f4d20ae3b5835ce 100644
--- a/src/api/api.cc
+++ b/src/api/api.cc
@@ -12605,6 +12605,25 @@ TryToCopyAndConvertArrayToCppBuffer<CTypeInfoBuilder<double>::Build().GetId(),
                                                             max_length);
 }
 
+void Isolate::SetPromiseCrossContextCallback(
+    PromiseCrossContextCallback callback) {
+  i::Isolate* isolate = reinterpret_cast<i::Isolate*>(this);
+  isolate->set_promise_cross_context_callback(callback);
+}
+
+Isolate::PromiseContextScope::PromiseContextScope(Isolate* isolate,
+                                                  v8::Local<v8::Object> tag)
+    : isolate_(reinterpret_cast<i::Isolate*>(isolate)) {
+  DCHECK(!isolate_->has_promise_context_tag());
+  DCHECK(!tag.IsEmpty());
+  i::Handle<i::Object> handle = Utils::OpenHandle(*tag);
+  isolate_->set_promise_context_tag(*handle);
+}
+
+Isolate::PromiseContextScope::~PromiseContextScope() {
+  isolate_->clear_promise_context_tag();
+}
+
 }  // namespace v8
 
 #ifdef ENABLE_SLOW_DCHECKS
diff --git a/src/builtins/promise-abstract-operations.tq b/src/builtins/promise-abstract-operations.tq
index f4e17456651516dfb3e81880da82ab228646ccfd..6142e0450dac646ccebd3fc7c5168f9b42b4d0b5 100644
--- a/src/builtins/promise-abstract-operations.tq
+++ b/src/builtins/promise-abstract-operations.tq
@@ -20,6 +20,9 @@ extern transitioning runtime PromiseResolveAfterResolved(
 
 extern transitioning runtime PromiseRejectEventFromStack(
     implicit context: Context)(JSPromise, JSAny): JSAny;
+
+extern transitioning runtime PromiseContextCheck(
+    implicit context: Context)(JSPromise): JSPromise;
 }
 
 // https://tc39.es/ecma262/#sec-promise-abstract-operations
@@ -457,12 +460,14 @@ transitioning macro PerformPromiseThenImpl(
     // PromiseReaction holding both the onFulfilled and onRejected callbacks.
     // Once the {promise} is resolved we decide on the concrete handler to
     // push onto the microtask queue.
+    const delegate = runtime::PromiseContextCheck(promise);
     const promiseReactions =
-        UnsafeCast<(Zero | PromiseReaction)>(promise.reactions_or_result);
+        UnsafeCast<(Zero | PromiseReaction)>(delegate.reactions_or_result);
 
     const reaction = NewPromiseReaction(
         promiseReactions, resultPromiseOrCapability, onFulfilled, onRejected);
-    promise.reactions_or_result = reaction;
+    delegate.reactions_or_result = reaction;
+    delegate.SetHasHandler();
   } else {
     const reactionsOrResult = promise.reactions_or_result;
     let microtask: PromiseReactionJobTask;
@@ -484,8 +489,8 @@ transitioning macro PerformPromiseThenImpl(
         }
       }
     EnqueueMicrotask(handlerContext, microtask);
+    promise.SetHasHandler();
   }
-  promise.SetHasHandler();
 }
 
 transitioning javascript builtin PerformPromiseThenFunction(
diff --git a/src/builtins/promise-constructor.tq b/src/builtins/promise-constructor.tq
index 50677631b5399453eebc6b149272431f74b1fce6..c652bd836b27805865e0a902ef9cf7c1ff254646 100644
--- a/src/builtins/promise-constructor.tq
+++ b/src/builtins/promise-constructor.tq
@@ -8,6 +8,9 @@
 namespace runtime {
 extern transitioning runtime PromiseHookInit(
     implicit context: Context)(Object, Object): JSAny;
+
+extern transitioning runtime PromiseContextInit(
+    implicit context: Context)(JSPromise): JSAny;
 }
 
 // https://tc39.es/ecma262/#sec-promise-constructor
@@ -62,6 +65,7 @@ transitioning javascript builtin PromiseConstructor(
     result = UnsafeCast<JSPromise>(
         FastNewObject(context, promiseFun, UnsafeCast<JSReceiver>(newTarget)));
     PromiseInit(result);
+    runtime::PromiseContextInit(result);
     RunAnyPromiseHookInit(result, Undefined);
   }
 
diff --git a/src/builtins/promise-misc.tq b/src/builtins/promise-misc.tq
index f3ece10afb659042fbb195a98cad8254cf1188c5..cd5261012bd9a2f16b2f3354b6c526ab3c58500f 100644
--- a/src/builtins/promise-misc.tq
+++ b/src/builtins/promise-misc.tq
@@ -55,6 +55,7 @@ macro PromiseInit(promise: JSPromise): void {
     is_silent: false,
     async_task_id: kInvalidAsyncTaskId
   });
+  promise.context_tag = kZero;
   promise_internal::ZeroOutEmbedderOffsets(promise);
 }
 
@@ -74,6 +75,7 @@ macro InnerNewJSPromise(implicit context: Context)(): JSPromise {
     is_silent: false,
     async_task_id: kInvalidAsyncTaskId
   });
+  promise.context_tag = kZero;
   return promise;
 }
 
@@ -273,6 +275,7 @@ transitioning macro NewJSPromise(implicit context: Context)(
                                  parent: Object): JSPromise {
   const instance = InnerNewJSPromise();
   PromiseInit(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, parent);
   return instance;
 }
@@ -296,6 +299,7 @@ transitioning macro NewJSPromise(
   instance.reactions_or_result = result;
   instance.SetStatus(status);
   promise_internal::ZeroOutEmbedderOffsets(instance);
+  runtime::PromiseContextInit(instance);
   RunAnyPromiseHookInit(instance, Undefined);
   return instance;
 }
diff --git a/src/compiler/js-create-lowering.cc b/src/compiler/js-create-lowering.cc
index e22b54b4c8354017481367ab0999ddd11a387b9c..1fdd5a1a8cbc464f39099b3f08655fb025dace48 100644
--- a/src/compiler/js-create-lowering.cc
+++ b/src/compiler/js-create-lowering.cc
@@ -1126,10 +1126,12 @@ Reduction JSCreateLowering::ReduceJSCreatePromise(Node* node) {
           jsgraph()->EmptyFixedArrayConstant());
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kReactionsOrResultOffset),
           jsgraph()->ZeroConstant());
+  a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kContextTagOffset),
+          jsgraph()->ZeroConstant());
   static_assert(v8::Promise::kPending == 0);
   a.Store(AccessBuilder::ForJSObjectOffset(JSPromise::kFlagsOffset),
           jsgraph()->ZeroConstant());
-  static_assert(JSPromise::kHeaderSize == 5 * kTaggedSize);
+  static_assert(JSPromise::kHeaderSize == 6 * kTaggedSize);
   for (int offset = JSPromise::kHeaderSize;
        offset < JSPromise::kSizeWithEmbedderFields; offset += kTaggedSize) {
     a.Store(AccessBuilder::ForJSObjectOffset(offset),
diff --git a/src/diagnostics/objects-printer.cc b/src/diagnostics/objects-printer.cc
index 71e67115368ce1ba8762251ca19943bfa57e253a..c79a4fe2fa685df87ea6448238f903db09216ef7 100644
--- a/src/diagnostics/objects-printer.cc
+++ b/src/diagnostics/objects-printer.cc
@@ -970,6 +970,7 @@ void JSPromise::JSPromisePrint(std::ostream& os) {
   }
   os << "\n - has_handler: " << has_handler();
   os << "\n - is_silent: " << is_silent();
+  os << "\n - context_tag: " << Brief(context_tag());
   JSObjectPrintBody(os, *this);
 }
 
diff --git a/src/execution/isolate-inl.h b/src/execution/isolate-inl.h
index 3e122ecf5d3c60eb4a334eaef30fedbf71102bba..0d7e90da840560c371e5ca4e9626c056bbf78a6b 100644
--- a/src/execution/isolate-inl.h
+++ b/src/execution/isolate-inl.h
@@ -133,6 +133,25 @@ bool Isolate::is_execution_terminating() {
          i::ReadOnlyRoots(this).termination_exception();
 }
 
+Tagged<Object> Isolate::promise_context_tag() { return promise_context_tag_; }
+
+bool Isolate::has_promise_context_tag() {
+  return promise_context_tag_ != ReadOnlyRoots(this).the_hole_value();
+}
+
+void Isolate::clear_promise_context_tag() {
+  set_promise_context_tag(ReadOnlyRoots(this).the_hole_value());
+}
+
+void Isolate::set_promise_context_tag(Tagged<Object> tag) {
+  promise_context_tag_ = tag;
+}
+
+void Isolate::set_promise_cross_context_callback(
+    PromiseCrossContextCallback callback) {
+  promise_cross_context_callback_ = callback;
+}
+
 #ifdef DEBUG
 Tagged<Object> Isolate::VerifyBuiltinsResult(Tagged<Object> result) {
   if (is_execution_terminating() && !v8_flags.strict_termination_checks) {
diff --git a/src/execution/isolate.cc b/src/execution/isolate.cc
index 377b984f26f5cbb14f9b49ed21c5e70f5692def1..99b99ed4166c566237b2fcf07b848fdb4334669b 100644
--- a/src/execution/isolate.cc
+++ b/src/execution/isolate.cc
@@ -624,6 +624,8 @@ void Isolate::Iterate(RootVisitor* v, ThreadLocalTop* thread) {
                       FullObjectSlot(&thread->pending_message_));
   v->VisitRootPointer(Root::kStackRoots, nullptr,
                       FullObjectSlot(&thread->context_));
+  v->VisitRootPointer(Root::kStackRoots, nullptr,
+                      FullObjectSlot(&promise_context_tag_));
 
   for (v8::TryCatch* block = thread->try_catch_handler_; block != nullptr;
        block = block->next_) {
@@ -5898,6 +5900,7 @@ bool Isolate::Init(SnapshotData* startup_snapshot_data,
     shared_heap_object_cache_.push_back(ReadOnlyRoots(this).undefined_value());
   }
 
+  clear_promise_context_tag();
   InitializeThreadLocal();
 
   // Profiler has to be created after ThreadLocal is initialized
@@ -7988,5 +7991,40 @@ void Isolate::PrintNumberStringCacheStats(const char* comment,
   PrintF("\n");
 }
 
+class Isolate::PromiseCrossContextCallbackScope {
+ public:
+  PromiseCrossContextCallbackScope(Isolate& isolate) : isolate_(isolate) {
+    DCHECK(!isolate_.in_promise_cross_context_callback_);
+    isolate_.in_promise_cross_context_callback_ = true;
+  }
+  ~PromiseCrossContextCallbackScope() {
+    isolate_.in_promise_cross_context_callback_ = false;
+  }
+
+ private:
+  Isolate& isolate_;
+};
+
+MaybeHandle<JSPromise> Isolate::RunPromiseCrossContextCallback(
+    Handle<NativeContext> context, Handle<JSPromise> promise) {
+  if (promise_cross_context_callback_ == nullptr ||
+      in_promise_cross_context_callback_) {
+    return promise;
+  }
+  PromiseCrossContextCallbackScope callback_scope(*this);
+  CHECK(IsJSReceiver(promise->context_tag()));
+
+  Handle<JSObject> context_tag(Cast<JSObject>(promise->context_tag()), this);
+  v8::Local<v8::Promise> result;
+  API_ASSIGN_RETURN_ON_EXCEPTION_VALUE(
+      this, result,
+      promise_cross_context_callback_(Utils::ToLocal(context),
+                                      v8::Utils::PromiseToLocal(promise),
+                                      v8::Utils::ToLocal(context_tag)),
+      MaybeHandle<JSPromise>());
+
+  return v8::Utils::OpenHandle(*result);
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/execution/isolate.h b/src/execution/isolate.h
index 90c80955145a10dd696ec6f39611eb2d4e78dcca..9cfaddb0c9a29faa0b6f5645be6561ec690d1c25 100644
--- a/src/execution/isolate.h
+++ b/src/execution/isolate.h
@@ -2400,6 +2400,15 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
                                        v8::ExceptionContext callback_kind);
   void SetExceptionPropagationCallback(ExceptionPropagationCallback callback);
 
+  inline Tagged<Object> promise_context_tag();
+  inline bool has_promise_context_tag();
+  inline void clear_promise_context_tag();
+  inline void set_promise_context_tag(Tagged<Object> tag);
+  inline void set_promise_cross_context_callback(
+      PromiseCrossContextCallback callback);
+  MaybeHandle<JSPromise> RunPromiseCrossContextCallback(
+      Handle<NativeContext> context, Handle<JSPromise> promise);
+
 #ifdef V8_ENABLE_WASM_SIMD256_REVEC
   void set_wasm_revec_verifier_for_test(
       compiler::turboshaft::WasmRevecVerifier* verifier) {
@@ -2942,6 +2951,12 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
 
   bool is_frozen_ = false;
 
+  Tagged<Object> promise_context_tag_;
+  PromiseCrossContextCallback promise_cross_context_callback_;
+  bool in_promise_cross_context_callback_ = false;
+
+  class PromiseCrossContextCallbackScope;
+
   friend class GlobalSafepoint;
   friend class heap::HeapTester;
   friend class IsolateForPointerCompression;
@@ -2949,6 +2964,7 @@ class V8_EXPORT_PRIVATE Isolate final : private HiddenFactory {
   friend class IsolateGroup;
   friend class TestSerializer;
   friend class SharedHeapNoClientsTest;
+  friend class PromiseCrossContextCallbackScope;
 };
 
 // The current entered Isolate and its thread data. Do not access these
diff --git a/src/heap/factory.cc b/src/heap/factory.cc
index 87b7dc6cbb557a59c7f455b1bf53c9c961562419..beaba2fe943e54f6aa3399ca4759db3a78073626 100644
--- a/src/heap/factory.cc
+++ b/src/heap/factory.cc
@@ -4587,6 +4587,12 @@ Handle<JSPromise> Factory::NewJSPromiseWithoutHook() {
   DisallowGarbageCollection no_gc;
   Tagged<JSPromise> raw = *promise;
   raw->set_reactions_or_result(Smi::zero(), SKIP_WRITE_BARRIER);
+  if (!isolate()->has_promise_context_tag()) {
+    raw->set_context_tag(Smi::zero(), SKIP_WRITE_BARRIER);
+  } else {
+    raw->set_context_tag(isolate()->promise_context_tag());
+  }
+
   raw->set_flags(0);
   // TODO(v8) remove once embedder data slots are always zero-initialized.
   InitEmbedderFields(*promise, Smi::zero());
diff --git a/src/objects/js-promise.tq b/src/objects/js-promise.tq
index 93a4a34f9f1f7fad40611d4b9432aaf944c9fbae..188619ea64c9e307f014898e4023ce796c52c7e2 100644
--- a/src/objects/js-promise.tq
+++ b/src/objects/js-promise.tq
@@ -32,6 +32,7 @@ extern class JSPromise extends JSObjectWithEmbedderSlots {
   // Smi 0 terminated list of PromiseReaction objects in case the JSPromise was
   // not settled yet, otherwise the result.
   reactions_or_result: Zero|PromiseReaction|JSAny;
+  context_tag: Object;
   flags: SmiTagged<JSPromiseFlags>;
 }
 
diff --git a/src/objects/value-serializer.cc b/src/objects/value-serializer.cc
index c37d9edafd5f5b460a9aa39f5aa5a275a6d49015..0e3aa9cb10bafcf0528adf43500c426773b46ec5 100644
--- a/src/objects/value-serializer.cc
+++ b/src/objects/value-serializer.cc
@@ -1113,8 +1113,8 @@ Maybe<bool> ValueSerializer::WriteJSArrayBufferView(
   WriteVarint(static_cast<uint32_t>(view->byte_length()));
   if (version_ >= 14) {
     uint32_t flags =
-      JSArrayBufferViewIsLengthTracking::encode(view->is_length_tracking()) |
-      JSArrayBufferViewIsBackedByRab::encode(view->is_backed_by_rab());
+        JSArrayBufferViewIsLengthTracking::encode(view->is_length_tracking()) |
+        JSArrayBufferViewIsBackedByRab::encode(view->is_backed_by_rab());
     WriteVarint(flags);
   }
   return ThrowIfOutOfMemory();
diff --git a/src/profiler/heap-snapshot-generator.cc b/src/profiler/heap-snapshot-generator.cc
index ff0be3558517befcc420e9df813370bb6a2c59e8..c6d5af9fe6953a3a3f07a172e4cab85fa57cc475 100644
--- a/src/profiler/heap-snapshot-generator.cc
+++ b/src/profiler/heap-snapshot-generator.cc
@@ -2082,6 +2082,8 @@ void V8HeapExplorer::ExtractJSPromiseReferences(HeapEntry* entry,
   SetInternalReference(entry, "reactions_or_result",
                        promise->reactions_or_result(),
                        JSPromise::kReactionsOrResultOffset);
+  SetInternalReference(entry, "context_tag", promise->context_tag(),
+                       JSPromise::kContextTagOffset);
 }
 
 void V8HeapExplorer::ExtractJSGeneratorObjectReferences(
diff --git a/src/runtime/runtime-promise.cc b/src/runtime/runtime-promise.cc
index 262b9aa5aa6974a4628d0679ada91aff76567906..9730731cd42c0ea6ce0d96ec250a11fcc434ebf8 100644
--- a/src/runtime/runtime-promise.cc
+++ b/src/runtime/runtime-promise.cc
@@ -216,5 +216,41 @@ RUNTIME_FUNCTION(Runtime_ConstructSuppressedError) {
   return *result;
 }
 
+RUNTIME_FUNCTION(Runtime_PromiseContextInit) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+  if (!isolate->has_promise_context_tag()) {
+    args.at<JSPromise>(0)->set_context_tag(Smi::zero());
+  } else {
+    CHECK(!IsUndefined(isolate->promise_context_tag()));
+    args.at<JSPromise>(0)->set_context_tag(isolate->promise_context_tag());
+  }
+  return ReadOnlyRoots(isolate).undefined_value();
+}
+
+RUNTIME_FUNCTION(Runtime_PromiseContextCheck) {
+  HandleScope scope(isolate);
+  DCHECK_EQ(1, args.length());
+
+  Handle<JSPromise> promise = args.at<JSPromise>(0);
+
+  // If promise.context_tag() is strict equal to isolate.promise_context_tag(),
+  // or if the promise being checked does not have a context tag, we'll just
+  // return promise directly.
+  Tagged<Object> obj = promise->context_tag();
+  if (obj == Smi::zero() || obj == isolate->promise_context_tag()) {
+    return *promise;
+  }
+
+  // Otherwise we defer to the PromiseCrossContextCallback. If the callback
+  // has not been set, then it should just return the same promise back here.
+  Handle<JSPromise> result;
+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(isolate, result,
+                                     isolate->RunPromiseCrossContextCallback(
+                                         isolate->native_context(), promise));
+
+  return *result;
+}
+
 }  // namespace internal
 }  // namespace v8
diff --git a/src/runtime/runtime.h b/src/runtime/runtime.h
index ab9f8b88686c00b18df661169455452ccb3b14ea..4485f11096a4858d11710f9a7b07f603acdee924 100644
--- a/src/runtime/runtime.h
+++ b/src/runtime/runtime.h
@@ -432,20 +432,22 @@ constexpr bool CanTriggerGC(T... properties) {
   F(StrictNotEqual, 2, 1)                  \
   F(ReferenceEqual, 2, 1)
 
-#define FOR_EACH_INTRINSIC_PROMISE(F, I) \
-  F(EnqueueMicrotask, 1, 1)              \
-  F(PromiseHookAfter, 1, 1)              \
-  F(PromiseHookBefore, 1, 1)             \
-  F(PromiseHookInit, 2, 1)               \
-  F(PromiseRejectEventFromStack, 2, 1)   \
-  F(PromiseRevokeReject, 1, 1)           \
-  F(RejectPromise, 3, 1)                 \
-  F(ResolvePromise, 2, 1)                \
-  F(PromiseRejectAfterResolved, 2, 1)    \
-  F(PromiseResolveAfterResolved, 2, 1)   \
-  F(ConstructSuppressedError, 3, 1)      \
-  F(ConstructAggregateErrorHelper, 4, 1) \
-  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1)
+#define FOR_EACH_INTRINSIC_PROMISE(F, I)                    \
+  F(EnqueueMicrotask, 1, 1)                                 \
+  F(PromiseHookAfter, 1, 1)                                 \
+  F(PromiseHookBefore, 1, 1)                                \
+  F(PromiseHookInit, 2, 1)                                  \
+  F(PromiseRejectEventFromStack, 2, 1)                      \
+  F(PromiseRevokeReject, 1, 1)                              \
+  F(RejectPromise, 3, 1)                                    \
+  F(ResolvePromise, 2, 1)                                   \
+  F(PromiseRejectAfterResolved, 2, 1)                       \
+  F(PromiseResolveAfterResolved, 2, 1)                      \
+  F(ConstructSuppressedError, 3, 1)                         \
+  F(ConstructAggregateErrorHelper, 4, 1)                    \
+  F(ConstructInternalAggregateErrorHelper, -1 /* <= 5*/, 1) \
+  F(PromiseContextInit, 1, 1)                               \
+  F(PromiseContextCheck, 1, 1)
 
 #define FOR_EACH_INTRINSIC_PROXY(F, I) \
   F(CheckProxyGetSetTrapResult, 2, 1)  \
