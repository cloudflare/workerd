load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")
load("@workerd//:build/wd_api_bundle.bzl", "wd_api_bundle")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")

modules = glob(["*.ts"])

internal_modules = glob(["internal/*.ts"])

srcs = modules + internal_modules

eslintrc_json = ":.eslintrc.json"

tsconfig_json = ":tsconfig.json"

ts_config(
    name = "tsconfig",
    src = tsconfig_json,
)

ts_project(
    name = "node",
    srcs = srcs,
    tsconfig = ":tsconfig",
)

wd_api_bundle(
    name = "bundle",
    # builtin modules are accessible under "node:<module_name>" name
    builtin_modules = dict([(
        m.removesuffix(".ts") + ".js",
        "node:" + m.removesuffix(".ts"),
    ) for m in modules]),
    const_name = "nodeBundle",
    include_prefix = "node",
    # internal modules are accessible under "node-internal:<module_name>" name without "internal/"
    # folder prefix.
    internal_modules = dict([(
        m.removesuffix(".ts") + ".js",
        "node-internal:" + m.removeprefix("internal/").removesuffix(".ts"),
    ) for m in internal_modules if not m.endswith(".d.ts")]),
    schema_id = "0xbcc8f57c63814005",
)

eslint_bin.eslint_test(
    name = "eslint",
    args = [
        "--config $(location {})".format(eslintrc_json),
        "-f stylish",
        "--report-unused-disable-directives"
    ] + ["$(location " + src + ")" for src in srcs],
    data = srcs + [
        eslintrc_json,
        tsconfig_json,
        "//:node_modules/@typescript-eslint/eslint-plugin",
    ],
    tags = ["lint"],
)
