load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("//:build/capnp_embed.bzl", "capnp_embed")
load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_capnp_library.bzl", "wd_capnp_library")
load("//:build/wd_cc_library.bzl", "wd_cc_library")

# Flag to enable WebGPU support via the Dawn library
bool_flag(
    name = "enable_experimental_webgpu",
    build_setting_default = False,
)

config_setting(
    name = "set_enable_experimental_webgpu",
    flag_values = {"enable_experimental_webgpu": "True"},
)

# TODO(cleanup): Split up into smaller targets, although this target is already relatively small and
# not encumbered with many dependencies.
wd_cc_library(
    name = "io-helpers",
    srcs = [
        "io-thread-context.c++",
        "io-timers.c++",
        "request-tracker.c++",
    ],
    hdrs = [
        "io-thread-context.h",
        "io-timers.h",
        "request-tracker.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/workerd/jsg",
        "@capnp-cpp//src/capnp/compat:http-over-capnp",
    ],
)

wd_cc_library(
    name = "io",
    # HACK: Currently, the `io` and `api` packages are interdependent. We fold all the sources
    #   from `api` into `io`. In principle, it should be possible to pull them apart so `api`
    #   depends on `io` but not vice versa. In practice, this appears very difficult due to the
    # IoContext -> Worker -> ServiceWorkerGlobalScope -> (various api targets) dependency chain.
    # TODO(cleanup): Fix this.
    srcs = [
        "compatibility-date.c++",
        "features.c++",
        "hibernation-manager.c++",
        "io-context.c++",
        "io-own.c++",
        "io-util.c++",
        "worker.c++",
    ] + ["//src/workerd/api:srcs"] + select({
        ":set_enable_experimental_webgpu": ["//src/workerd/api/gpu:srcs"],
        "//conditions:default": [],
    }),
    hdrs = [
        "compatibility-date.h",
        "features.h",
        "hibernation-manager.h",
        "io-channels.h",
        "io-context.h",
        "io-own.h",
        "io-util.h",
        "promise-wrapper.h",
        "worker.h",
    ] + ["//src/workerd/api:hdrs"] + select({
        ":set_enable_experimental_webgpu": ["//src/workerd/api/gpu:hdrs"],
        "//conditions:default": [],
    }),
    defines = select({
        ":set_enable_experimental_webgpu": ["WORKERD_EXPERIMENTAL_ENABLE_WEBGPU"],
        "//conditions:default": [],
    }),
    implementation_deps = [
        "//src/workerd/util:perfetto",
        "//src/workerd/util:string-buffer",
        "@capnp-cpp//src/kj/compat:kj-brotli",
        "@capnp-cpp//src/kj/compat:kj-gzip",
        "@nbytes",
        "@simdutf",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":actor",
        ":actor-id",
        ":actor-storage_capnp",
        ":cdp_capnp",
        ":io-gate",
        ":io-helpers",
        ":limit-enforcer",
        ":observer",
        ":supported-compatibility-date_capnp",
        ":trace",
        ":worker-interface",
        "//src/cloudflare",
        "//src/node",
        "//src/workerd/api:analytics-engine_capnp",
        "//src/workerd/api:data-url",
        "//src/workerd/api:deferred-proxy",
        "//src/workerd/api:encoding",
        "//src/workerd/api:url",
        "//src/workerd/jsg",
        "//src/workerd/util:autogate",
        "//src/workerd/util:sqlite",
        "//src/workerd/util:thread-scopes",
        "//src/workerd/util:uuid",
        "@capnp-cpp//src/capnp:capnp-rpc",
        "@capnp-cpp//src/capnp/compat:http-over-capnp",
        "@capnp-cpp//src/kj:kj-async",
        "@ssl",
    ] + select({
        ":set_enable_experimental_webgpu": ["@dawn"],
        "//conditions:default": [],
    }),
)

# TODO(cleanup): Split this up further.
wd_cc_library(
    name = "actor",
    srcs = [
        "actor-cache.c++",
        "actor-sqlite.c++",
        "actor-storage.c++",
    ],
    hdrs = [
        "actor-cache.h",
        "actor-sqlite.h",
        "actor-storage.h",
    ],
    implementation_deps = [
        "@sqlite3",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":actor-storage_capnp",
        ":io-gate",
        "//src/workerd/jsg:exception",
        "//src/workerd/util:duration-exceeded-logger",
        "//src/workerd/util:sqlite",
        "@capnp-cpp//src/capnp:capnp-rpc",
        "@capnp-cpp//src/kj:kj-async",
    ],
)

wd_cc_library(
    name = "trace",
    srcs = ["trace.c++"],
    hdrs = ["trace.h"],
    implementation_deps = [
        "//src/workerd/util:thread-scopes",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":worker-interface_capnp",
        "//src/workerd/jsg:memory-tracker",
        "//src/workerd/util",
        "//src/workerd/util:own-util",
        "@capnp-cpp//src/capnp:capnp-rpc",
        "@capnp-cpp//src/capnp:capnpc",
        "@capnp-cpp//src/kj:kj-async",
        "@capnp-cpp//src/kj/compat:kj-http",
        "@ssl",
    ],
)

wd_cc_library(
    name = "observer",
    srcs = ["observer.c++"],
    hdrs = ["observer.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":features_capnp",
        ":trace",
        ":worker-interface",
        "//src/workerd/jsg:observer",
        "//src/workerd/util:sqlite",
    ],
)

wd_cc_library(
    name = "io-gate",
    srcs = ["io-gate.c++"],
    hdrs = ["io-gate.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
        "@capnp-cpp//src/kj:kj-async",
    ],
)

wd_cc_library(
    name = "limit-enforcer",
    hdrs = ["limit-enforcer.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":observer",
        "//src/workerd/jsg",
    ],
)

wd_cc_library(
    name = "worker-entrypoint",
    srcs = ["worker-entrypoint.c++"],
    hdrs = ["worker-entrypoint.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":io",
        "//src/workerd/util:perfetto",
    ],
)

wd_cc_library(
    name = "worker-interface",
    srcs = ["worker-interface.c++"],
    hdrs = ["worker-interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":worker-interface_capnp",
        "@capnp-cpp//src/capnp:capnp-rpc",
        "@capnp-cpp//src/capnp:capnpc",
        "@capnp-cpp//src/capnp/compat:http-over-capnp",
    ],
)

wd_cc_library(
    name = "actor-id",
    hdrs = ["actor-id.h"],
    visibility = ["//visibility:public"],
    deps = ["@capnp-cpp//src/kj"],
)

genrule(
    name = "trimmed-supported-compatibility-date-gen",
    srcs = ["supported-compatibility-date.txt"],
    outs = ["trimmed-supported-compatibility-date.txt"],
    cmd = "tr -d '\n' < $(location supported-compatibility-date.txt) > $(location trimmed-supported-compatibility-date.txt)",
    cmd_ps = "(Get-Content $(location supported-compatibility-date.txt) -Raw -Encoding Ascii).TrimEnd() | Set-Content $(location trimmed-supported-compatibility-date.txt) -NoNewLine -Encoding Ascii",
    visibility = ["//visibility:public"],
)

capnp_embed(
    name = "trimmed-supported-compatibility-date",
    src = ":trimmed-supported-compatibility-date-gen",
)

wd_capnp_library(src = "cdp.capnp")

wd_capnp_library(
    src = "supported-compatibility-date.capnp",
    deps = [
        ":trimmed-supported-compatibility-date",
    ],
)

wd_capnp_library(
    src = "worker-interface.capnp",
    deps = [
        ":outcome_capnp",
        ":script-version_capnp",
        "@capnp-cpp//src/capnp/compat:http-over-capnp_capnp",
    ],
)

wd_capnp_library(src = "actor-storage.capnp")

wd_capnp_library(src = "outcome.capnp")

wd_capnp_library(src = "script-version.capnp")

wd_capnp_library(src = "compatibility-date.capnp")

wd_capnp_library(src = "features.capnp")

kj_test(
    src = "io-gate-test.c++",
    deps = [
        ":io-gate",
    ],
)

kj_test(
    src = "actor-cache-test.c++",
    deps = [
        ":actor",
        ":io-gate",
        "//src/workerd/util:test",
        "//src/workerd/util:test-util",
    ],
)

kj_test(
    src = "actor-sqlite-test.c++",
    deps = [
        ":actor",
        ":io-gate",
        "//src/workerd/util:test",
        "//src/workerd/util:test-util",
    ],
)

kj_test(
    src = "promise-wrapper-test.c++",
    deps = [":io"],
)

kj_test(
    src = "compatibility-date-test.c++",
    deps = [
        ":io",
        "@capnp-cpp//src/capnp:capnpc",
    ],
)

kj_test(
    src = "observer-test.c++",
    deps = [
        ":observer",
        "@capnp-cpp//src/capnp:capnpc",
    ],
)

kj_test(
    src = "trace-test.c++",
    deps = [
        ":trace",
        "//src/workerd/util:thread-scopes",
    ],
)
