load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("//:build/capnp_embed.bzl", "capnp_embed")
load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_cc_capnp_library.bzl", "wd_cc_capnp_library")
load("//:build/wd_cc_library.bzl", "wd_cc_library")

# Flag to enable WebGPU support via the Dawn library
bool_flag(
    name = "enable_experimental_webgpu",
    build_setting_default = False,
)

config_setting(
    name = "set_enable_experimental_webgpu",
    flag_values = {"enable_experimental_webgpu": "True"},
)

wd_cc_library(
    name = "io",
    # HACK: Currently, the `io` and `api` packages are interdependent. We fold all the sources
    #   from `api` into `io`. In principle, it should be possible to pull them apart so `api`
    #   depends on `io` but not vice versa.
    # TODO(cleaunp): Fix this.
    srcs = glob(
        ["*.c++"],
        exclude = [
            "worker-interface.c++",
            "*-test.c++",
            "trace.c++",
        ],
    ) + ["//src/workerd/api:srcs"],
    hdrs = glob(
        ["*.h"],
        # `trace.h` should really be excluded here, but doing so causes the build to fail on
        # Windows with errors like:
        #
        # ```
        # ERROR: C:/.../src/workerd/io/BUILD.bazel: Compiling src/workerd/io/compatibility-date.c++ failed: undeclared inclusion(s) in rule '//src/workerd/io:io':
        # this rule is missing dependency declarations for the following files included by 'src/workerd/io/compatibility-date.c++':
        #   'bazel-out/x64_windows-opt/bin/src/workerd/io/_virtual_includes/io/workerd/io/trace.h'
        # In file included from <built-in>:429:
        # ```
        #
        # This feels like a weird interaction between symlinks on Windows and Bazel.
        # `trace.h` is `#pragma once`d though, so including it in both `io` and `trace` targets
        # should be ok.
        #
        # TODO(soon): Fix this
        exclude = [
            "actor-id.h",
            "io-channels.h",
            "observer.h",
            "worker-interface.h",
        ],
    ) + ["//src/workerd/api:hdrs"],
    defines = select({
        ":set_enable_experimental_webgpu": ["WORKERD_EXPERIMENTAL_ENABLE_WEBGPU"],
        "//conditions:default": [],
    }),
    implementation_deps = [
        "@capnp-cpp//src/kj/compat:kj-brotli",
        "@capnp-cpp//src/kj/compat:kj-gzip",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":actor-id",
        ":actor-storage_capnp",
        ":capnp",
        ":io-channels",
        ":observer",
        ":trace",
        ":worker-interface",
        "//src/cloudflare",
        "//src/node",
        "//src/workerd/api:analytics-engine_capnp",
        "//src/workerd/api:r2-api_capnp",
        "//src/workerd/jsg",
        "//src/workerd/util:autogate",
        "//src/workerd/util:duration-exceeded-logger",
        "//src/workerd/util:sqlite",
        "@capnp-cpp//src/capnp:capnp-rpc",
        "@capnp-cpp//src/capnp/compat:http-over-capnp",
        "@capnp-cpp//src/kj:kj-async",
    ] + select({
        ":set_enable_experimental_webgpu": ["@dawn"],
        "//conditions:default": [],
    }),
)

wd_cc_library(
    name = "trace",
    srcs = ["trace.c++"],
    hdrs = ["trace.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":worker-interface_capnp",
        "//src/workerd/jsg:memory-tracker",
        "//src/workerd/util:own-util",
        "//src/workerd/util:perfetto",
        "//src/workerd/util:thread-scopes",
        "@capnp-cpp//src/kj:kj-async",
        "@capnp-cpp//src/kj/compat:kj-http",
    ],
)

wd_cc_library(
    name = "observer",
    hdrs = ["observer.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":trace",
        "//src/workerd/jsg:observer",
    ],
)

wd_cc_library(
    name = "limit-enforcer",
    hdrs = ["limit-enforcer.h"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "worker-interface",
    srcs = ["worker-interface.c++"],
    hdrs = ["worker-interface.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":trace",
        "@capnp-cpp//src/capnp/compat:http-over-capnp",
    ],
)

wd_cc_library(
    name = "actor-id",
    hdrs = ["actor-id.h"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "io-channels",
    hdrs = ["io-channels.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":actor-id",
        ":trace",
    ],
)

genrule(
    name = "trimmed-supported-compatibility-date-gen",
    srcs = ["supported-compatibility-date.txt"],
    outs = ["trimmed-supported-compatibility-date.txt"],
    cmd = "tr -d '\n' < $(location supported-compatibility-date.txt) > $(location trimmed-supported-compatibility-date.txt)",
    cmd_ps = "(Get-Content $(location supported-compatibility-date.txt) -Raw -Encoding Ascii).TrimEnd() | Set-Content $(location trimmed-supported-compatibility-date.txt) -NoNewLine -Encoding Ascii",
)

capnp_embed(
    name = "trimmed-supported-compatibility-date",
    src = ":trimmed-supported-compatibility-date-gen",
)

# TODO(cleanup): Split this target up further, as many dependents don't need all the files here.
#   Avoiding the dependency on supported-compatibility-date.capnp is often helpful due to the
#   transitive dependency on `trimmed-supported-compatibility-date.txt` which is dynamically
#   generated.
wd_cc_capnp_library(
    name = "capnp",
    srcs = [
        "cdp.capnp",
        "supported-compatibility-date.capnp",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":compatibility_date_capnp",
        ":features_capnp",
        ":outcome_capnp",
        ":script_version_capnp",
        ":trimmed-supported-compatibility-date",
        "@capnp-cpp//src/capnp/compat:http-over-capnp_capnp",
    ],
)

wd_cc_capnp_library(
    name = "worker-interface_capnp",
    srcs = [
        "worker-interface.capnp",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":outcome_capnp",
        ":script_version_capnp",
        "@capnp-cpp//src/capnp/compat:http-over-capnp_capnp",
    ],
)

wd_cc_capnp_library(
    name = "actor-storage_capnp",
    srcs = [
        "actor-storage.capnp",
    ],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "outcome_capnp",
    srcs = ["outcome.capnp"],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "script_version_capnp",
    srcs = ["script-version.capnp"],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "compatibility_date_capnp",
    srcs = ["compatibility-date.capnp"],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "features_capnp",
    srcs = ["features.capnp"],
    visibility = ["//visibility:public"],
)

[kj_test(
    src = f,
    deps = [
        ":io",
        "//src/workerd/util:autogate",
        "//src/workerd/util:test-util",
    ],
) for f in glob(["*-test.c++"])]
