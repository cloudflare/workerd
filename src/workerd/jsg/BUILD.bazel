load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("//:build/js_capnp_library.bzl", "js_capnp_library")
load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_cc_capnp_library.bzl", "wd_cc_capnp_library")
load("//:build/wd_cc_library.bzl", "wd_cc_library")

wd_cc_library(
    name = "jsg",
    srcs = glob(
        ["*.c++"],
        exclude = [
            "exception.c++",
            "memory.c++",
            "*-test.c++",
        ],
    ),
    hdrs = glob(
        ["*.h"],
        exclude = [
            "exception.h",
            "observer.h",
            "memory.h",
            "rtti.h",
        ],
    ) + ["//src/workerd/util:autogate.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":exception",
        ":memory-tracker",
        ":modules_capnp",
        ":observer",
        ":url",
        "//src/workerd/util",
        "//src/workerd/util:sentry",
        "//src/workerd/util:thread-scopes",
        "//src/workerd/util:autogate",
        "@capnp-cpp//src/kj",
        "@workerd-v8//:v8",
    ],
)

wd_cc_library(
    name = "memory-tracker",
    hdrs = ["memory.h"],
    srcs = ["memory.c++"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
        "@workerd-v8//:v8",
    ],
)

wd_cc_library(
    name = "url",
    srcs = ["url.c++"],
    hdrs = [
        "url.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@workerd-v8//:v8",
        "@capnp-cpp//src/kj",
        "@ada-url",
        ":memory-tracker",
        ":exception",
    ],
)

wd_cc_library(
    name = "exception",
    srcs = ["exception.c++"],
    hdrs = ["exception.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
    ],
)

wd_cc_capnp_library(
    name = "rtti_capnp",
    srcs = ["rtti.capnp"],
    visibility = ["//visibility:public"],
)

js_capnp_library(
    name = "rtti_capnp_js",
    srcs = ["rtti.capnp"],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

npm_package(
    name = "jsg_js",
    srcs = [":rtti_capnp_js"],
    # Required to ensure source files are copied when running internal builds
    # that depend on `workerd` as an external repository
    include_external_repositories = ["workerd"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "rtti",
    hdrs = ["rtti.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":rtti_capnp",
        ":jsg",
    ],
)

wd_cc_library(
    name = "macro-meta",
    hdrs = ["macro-meta.h"],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "modules_capnp",
    srcs = ["modules.capnp"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "observer",
    hdrs = ["observer.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
    ],
)

[kj_test(
    src = f,
    deps = [
        ":jsg",
    ],
) for f in glob(
    ["*-test.c++"],
    exclude = [
        # defined below
        "macro-meta-test.c++",
        "resource-test.c++",
        "rtti-test.c++",
        "url-test.c++",
    ],
)]

# Moved out as macro-meta-test does not depend on V8 or JSG proper, this makes the test much
# smaller.
kj_test(
    src = "macro-meta-test.c++",
    deps = [
        ":macro-meta",
    ],
)

kj_test(
    src = "rtti-test.c++",
    deps = [
        ":rtti",
        ":rtti_test_capnp",
        # todo: move text encoding out
        "@capnp-cpp//src/capnp:capnpc",
    ],
)

kj_test(
    src = "url-test.c++",
    deps = [
        ":jsg",
    ],
)

wd_cc_capnp_library(
    name = "resource_test_capnp",
    srcs = ["resource-test.capnp"],
    data = glob(["resource-test-*.js"]),
    deps = [":modules_capnp"],
)

wd_cc_capnp_library(
    name = "rtti_test_capnp",
    srcs = ["rtti-test.capnp"],
    deps = [":modules_capnp"],
)

kj_test(
    src = "resource-test.c++",
    deps = [
        ":jsg",
        ":resource_test_capnp",
    ],
)
