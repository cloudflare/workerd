load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_cc_library.bzl", "wd_cc_library")

wd_cc_library(
    name = "perfetto",
    srcs = ["perfetto-tracing.c++"],
    hdrs = [
        "perfetto-tracing.h",
        "use-perfetto-categories.h",
    ],
    defines = select({
        "@platforms//os:windows": [],
        "//conditions:default": ["WORKERD_USE_PERFETTO"],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
    ] + select({
        "@platforms//os:windows": [],
        "//conditions:default": ["@perfetto//:libperfetto_client_experimental"],
    }),
)
# TODO(later): Currently perfetto support is not enabled on Windows simply because the
# perfetto bazel build fails on windows for some reason and it's currently not worth
# the time to invest of figuring out why. If some intrepid soul wishes to figure out
# why the Windows build is failing, we could simplify things here a bit.

wd_cc_library(
    name = "util",
    srcs = [
        "mimetype.c++",
        "stream-utils.c++",
        "wait-list.c++",
    ],
    # This is verbose, but allows us to be intentional about what we include here and e.g. avoid
    # accidentally including test headers or having targets depend on more than they need to.
    # TODO (cleanup): Break this up entirely.
    hdrs = [
        "abortable.h",
        "batch-queue.h",
        "canceler.h",
        "color-util.h",
        "duration-exceeded-logger.h",
        "http-util.h",
        "mimetype.h",
        "stream-utils.h",
        "string-buffer.h",
        "strings.h",
        "uncaught-exception-source.h",
        "wait-list.h",
        "weak-refs.h",
        "xthreadnotifier.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
        "@capnp-cpp//src/kj:kj-async",
    ],
)

wd_cc_library(
    name = "uuid",
    srcs = ["uuid.c++"],
    hdrs = ["uuid.h"],
    implementation_deps = [
        "@capnp-cpp//src/kj/compat:kj-http",
        "@ssl",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
    ],
)

wd_cc_library(
    name = "test",
    hdrs = ["test.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj:kj-test",
    ],
)

wd_cc_library(
    name = "sqlite",
    srcs = [
        "sqlite.c++",
        "sqlite-kv.c++",
    ],
    hdrs = [
        "sqlite.h",
        "sqlite-kv.h",
    ],
    implementation_deps = [
        "@sqlite3",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":sentry",
        "@capnp-cpp//src/kj:kj-async",
    ],
)

wd_cc_library(
    name = "test-util",
    srcs = ["capnp-mock.c++"],
    hdrs = ["capnp-mock.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/capnp:capnpc",
    ],
)

wd_cc_library(
    name = "symbolizer",
    srcs = ["symbolizer.c++"],
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":sentry",
        "@capnp-cpp//src/kj",
    ],
    alwayslink = 1,
)

wd_cc_library(
    name = "own-util",
    hdrs = ["own-util.h"],
    visibility = ["//visibility:public"],
    deps = ["@capnp-cpp//src/kj"],
)

wd_cc_library(
    name = "sentry",
    hdrs = ["sentry.h"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "thread-scopes",
    srcs = ["thread-scopes.c++"],
    hdrs = ["thread-scopes.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj/compat:kj-http",
    ],
)

wd_cc_library(
    name = "autogate",
    srcs = ["autogate.c++"],
    hdrs = ["autogate.h"],
    # Make missing string repr for an autogate into a hard error
    copts = ["-Werror=switch"],
    visibility = ["//visibility:public"],
    deps = [
        ":sentry",
        "@capnp-cpp//src/capnp",
        "@capnp-cpp//src/kj",
    ],
)

wd_cc_library(
    name = "duration-exceeded-logger",
    hdrs = ["duration-exceeded-logger.h"],
    visibility = ["//visibility:public"],
)

exports_files(["autogate.h"])

[kj_test(
    src = f,
    deps = [
        ":util",
    ],
) for f in [
    "batch-queue-test.c++",
    "mimetype-test.c++",
    "wait-list-test.c++",
    "duration-exceeded-logger-test.c++",
    "string-buffer-test.c++",
    ]
]

kj_test(
    src = "sqlite-test.c++",
    deps = [
        ":sqlite",
    ],
)

kj_test(
    src = "sqlite-kv-test.c++",
    deps = [
        ":sqlite",
    ],
)

kj_test(
    src = "test-test.c++",
    deps = [
        ":test",
    ],
)

kj_test(
    src = "uuid-test.c++",
    deps = [
        ":uuid",
    ],
)