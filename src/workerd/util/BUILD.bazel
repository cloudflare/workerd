load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_cc_library.bzl", "wd_cc_library")
load("//:build/wd_cc_capnp_library.bzl", "wd_cc_capnp_library")

wd_cc_library(
    name = "util",
    srcs = glob(
        ["*.c++"],
        exclude = [
            "*-test.c++",
            "capnp-mock.c++",
            "symbolizer.c++",
            "sqlite*.c++",
            "thread-scopes.c++",
            "autogate.c++"
        ],
    ),
    hdrs = glob(
        ["*.h"],
        exclude = [
            "capnp-mock.h",
            "sqlite*.h",
            "own-util.h",
            "thread-scopes.h",
            "sentry.h",
            "autogate.h"
        ],
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj/compat:kj-http",
        "@capnp-cpp//src/kj/compat:kj-tls",
    ],
)

wd_cc_library(
    name = "sqlite",
    srcs = [
        "sqlite.c++",
        "sqlite-kv.c++",
    ],
    hdrs = [
        "sqlite.h",
        "sqlite-kv.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj:kj-async",
        "@sqlite3",
        "//src/workerd/util:sentry",
    ],
)

wd_cc_library(
    name = "test-util",
    srcs = ["capnp-mock.c++"],
    hdrs = ["capnp-mock.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/capnp:capnpc",
    ],
)

wd_cc_library(
    name = "symbolizer",
    srcs = ["symbolizer.c++"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj",
        ":sentry",
    ],
    alwayslink = 1,
    target_compatible_with = select({
        "@platforms//os:windows": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
)

wd_cc_library(
    name = "own-util",
    hdrs = ["own-util.h"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "sentry",
    hdrs = ["sentry.h"],
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "thread-scopes",
    srcs = ["thread-scopes.c++"],
    hdrs = ["thread-scopes.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@capnp-cpp//src/kj/compat:kj-http",
    ],
)

wd_cc_capnp_library(
    name = "autogate_capnp",
    srcs = ["autogate.capnp"],
    visibility = ["//visibility:public"],
    deps = [],
)

wd_cc_library(
    name = "autogate",
    srcs = ["autogate.c++"],
    hdrs = ["autogate.h"],
    visibility = ["//visibility:public"],
    deps = [":autogate_capnp", ":sentry"],
)

exports_files(["autogate.h"])

[kj_test(
    src = f,
    deps = [
        ":util",
    ],
) for f in glob(
    ["*-test.c++"],
    exclude = ["sqlite-*.c++"],
)]

kj_test(
    src = "sqlite-test.c++",
    deps = [
        ":sqlite",
    ],
)

kj_test(
    src = "sqlite-kv-test.c++",
    deps = [
        ":sqlite",
    ],
)
