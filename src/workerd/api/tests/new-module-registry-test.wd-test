using Workerd = import "/workerd/workerd.capnp";

const unitTests :Workerd.Config = (
  services = [
    ( name = "new-module-registry-test",
      worker = (
        modules = [
          (name = "worker", esModule = embed "new-module-registry-test.js"),
          (name = "foo", esModule = "export const foo = 1; export default 2; export const bar = import.meta.url"),
          (name = "bar", esModule = "export const foo = 1; export default 2;"),
          (name = "node:fs", esModule = "export default 'abc'"),

          # Intentionally bad module to test error handling.
          # Evaluation will error because i/o is not permitted at top-level scope.
          (name = "bad", esModule = "export default 1; setTimeout(() => {}, 10)"),

          # Ensure that async context is propagated into a dynamic import.
          (name = "als", esModule = "export default globalThis.als.getStore()"),

          # Import assertions are not supported currently
          (name = "ia", esModule = "import * as def from 'foo' with { a: 'test' }"),

          # Errors on ESM eval should be reported properly in both static and
          # dynamic imports.
          (name = "esm-error", esModule = "export default 1; throw new Error('boom');"),
          (name = "esm-error-dynamic", esModule = "export * as d from 'esm-error'"),

          # CommonJS modules work
          (name = "cjs1",
           namedExports = ["foo", "bar"],
           commonJsModule = "module.exports = { foo: 1, bar: 2, filename: __filename, dirname: __dirname, assert: require('assert') }"),
          (name = "cjs2", commonJsModule = "module.exports = require('cjs1')"),
          (name = "cjs3", commonJsModule = "throw new Error('boom')"),
          # Intentional circular dependency
          (name = "cjs4", commonJsModule = "module.exports = require('cjs5')"),
          (name = "cjs5", commonJsModule = "module.exports = require('cjs4')"),

          # Other module types work
          (name = "text", text = "abc"),
          (name = "data", data = "abcdef"),
          (name = "json", json = "{ \"foo\": 1 }"),
          (name = "invalid-json", json = "1n"),

          (name = "wasm", wasm = embed "test.wasm")
        ],
        compatibilityDate = "2025-05-01",
        compatibilityFlags = [
          "nodejs_compat",
          "new_module_registry",
          "experimental",
        ],
      ),
    ),
  ],
);
