import * as vm from 'node:vm';
import { strictEqual, deepStrictEqual, throws } from 'node:assert';

export const vmTest = {
  test() {
    // Note: test was generated by claude with manual tweaks

    // Test constants
    strictEqual(typeof vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER, 'symbol');
    strictEqual(typeof vm.constants.DONT_CONTEXTIFY, 'symbol');

    // Test isContext function
    // Should validate object argument
    throws(() => vm.isContext(null), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.isContext(undefined), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.isContext('string'), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.isContext(123), {
      code: 'ERR_INVALID_ARG_TYPE',
    });

    // Should work with objects and arrays (but always return false)
    strictEqual(vm.isContext({}), false);
    strictEqual(vm.isContext([]), false);
    strictEqual(vm.isContext(new Object()), false);

    // Basic construction should validate and throw NOT_IMPLEMENTED
    throws(() => new vm.Script('code'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
      message: /Script/,
    });

    // Test Script constructor argument validation
    throws(() => new vm.Script('code', { filename: 123 }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => new vm.Script('code', { lineOffset: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => new vm.Script('code', { columnOffset: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => new vm.Script('code', { cachedData: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => new vm.Script('code', { produceCachedData: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(
      () => new vm.Script('code', { importModuleDynamically: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );

    // Test Script with string options (should be treated as filename)
    throws(() => new vm.Script('code', 'filename.js'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test runInContext function
    throws(() => vm.runInContext('this.a = 1;', {}), {
      message: /must be an vm.Context/,
    });
    throws(() => vm.runInContext('code', null), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.runInContext('code', 'invalid'), {
      code: 'ERR_INVALID_ARG_TYPE',
    });

    throws(() => vm.runInNewContext('code'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });
    throws(() => vm.runInNewContext('code', {}), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test runInThisContext function
    throws(() => vm.runInThisContext('code'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test runInThisContext with string options
    throws(() => vm.runInThisContext('code', 'filename.js'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test createContext function
    throws(() => vm.createContext(), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });
    throws(() => vm.createContext({}), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test createContext argument validation
    throws(() => vm.createContext({}, { name: 123 }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.createContext({}, { origin: 123 }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.createContext({}, { codeGeneration: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.createContext({}, { importModuleDynamically: 'invalid' }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.createContext({}, { microtaskMode: 'invalid' }), {
      code: 'ERR_INVALID_ARG_VALUE',
    });

    // Test createScript function
    throws(() => vm.createScript('code'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test compileFunction
    throws(() => vm.compileFunction('code'), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test compileFunction argument validation
    throws(() => vm.compileFunction(123), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.compileFunction('code', 'invalid_params'), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.compileFunction('code', ['param'], { filename: 123 }), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(
      () => vm.compileFunction('code', ['param'], { columnOffset: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () => vm.compileFunction('code', ['param'], { lineOffset: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () => vm.compileFunction('code', ['param'], { cachedData: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () =>
        vm.compileFunction('code', ['param'], { produceCachedData: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () =>
        vm.compileFunction('code', ['param'], {
          importModuleDynamically: 'invalid',
        }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () =>
        vm.compileFunction('code', ['param'], { parsingContext: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );
    throws(
      () =>
        vm.compileFunction('code', ['param'], { contextExtensions: 'invalid' }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );

    // Test measureMemory
    throws(() => vm.measureMemory(), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });
    throws(() => vm.measureMemory({}), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test measureMemory argument validation
    throws(() => vm.measureMemory({ mode: 'invalid' }), {
      code: 'ERR_INVALID_ARG_VALUE',
    });
    throws(() => vm.measureMemory({ execution: 'invalid' }), {
      code: 'ERR_INVALID_ARG_VALUE',
    });

    // Test edge cases with various input types
    throws(() => vm.runInContext(null, {}), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.runInNewContext(null), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });
    throws(() => vm.runInThisContext(null), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test with complex nested validation
    throws(
      () =>
        vm.createContext(
          {},
          {
            codeGeneration: {
              strings: 'invalid',
            },
          }
        ),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );

    throws(
      () =>
        vm.createContext(
          {},
          {
            codeGeneration: {
              wasm: 'invalid',
            },
          }
        ),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );

    // Test compileFunction with invalid params array elements
    throws(() => vm.compileFunction('code', [123]), {
      code: 'ERR_INVALID_ARG_TYPE',
    });
    throws(() => vm.compileFunction('code', ['valid', null]), {
      code: 'ERR_INVALID_ARG_TYPE',
    });

    // Test compileFunction with invalid contextExtensions
    throws(
      () =>
        vm.compileFunction('code', [], {
          contextExtensions: ['invalid'],
        }),
      {
        code: 'ERR_INVALID_ARG_TYPE',
      }
    );

    // Test timeout validation in runInThisContext options
    throws(() => vm.runInThisContext('code', { timeout: -1 }), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test boolean validations
    throws(() => vm.runInThisContext('code', { breakOnSigint: 'invalid' }), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });
    throws(() => vm.runInThisContext('code', { displayErrors: 'invalid' }), {
      code: 'ERR_METHOD_NOT_IMPLEMENTED',
    });

    // Test that constants object is frozen
    throws(() => {
      vm.constants.NEW_PROP = 'test';
    });
    throws(() => {
      delete vm.constants.USE_MAIN_CONTEXT_DEFAULT_LOADER;
    });

    strictEqual(vm.default.Script, vm.Script);
    strictEqual(vm.default.createContext, vm.createContext);
    strictEqual(vm.default.isContext, vm.isContext);
    strictEqual(vm.default.constants, vm.constants);
  },
};
