load("//:build/kj_test.bzl", "kj_test")
load("//:build/wd_cc_capnp_library.bzl", "wd_cc_capnp_library")
load("//:build/wd_cc_library.bzl", "wd_cc_library")
load("//:build/wd_test.bzl", "wd_test")

filegroup(
    name = "srcs",
    srcs = select({
        "//src/workerd/io:set_enable_experimental_webgpu": glob(
            ["**/*.c++"],
            exclude = [
                "html-rewriter.c++",
                "rtti.c++",
                "**/*test*.c++",
                "pyodide.c++",
            ],
        ),
        "//conditions:default": glob(
            ["**/*.c++"],
            exclude = [
                "html-rewriter.c++",
                "rtti.c++",
                "**/*test*.c++",
                "pyodide.c++",
                "gpu/*.c++",
            ],
        ),
    }),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "hdrs",
    srcs = select({
        "//src/workerd/io:set_enable_experimental_webgpu": glob(
            ["**/*.h"],
            exclude = [
                "html-rewriter.h",
                "modules.h",
                "rtti.h",
                "**/*test*.h",
                "pyodide.h",
            ],
        ),
        "//conditions:default": glob(
            ["**/*.h"],
            exclude = [
                "html-rewriter.h",
                "modules.h",
                "rtti.h",
                "**/*test*.h",
                "pyodide.h",
                "gpu/*.h",
            ],
        ),
    }),
    visibility = ["//visibility:public"],
)

wd_cc_library(
    name = "rtti",
    srcs = ["rtti.c++"],
    hdrs = [
        "modules.h",
        "rtti.h",
        "//src/pyodide:generated/pyodide_extra.capnp.h",
        "//src/workerd/server:workerd.capnp.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":html-rewriter",
        "//src/pyodide",
        "//src/pyodide:pyodide_extra_capnp",
        "//src/workerd/io",
        "//src/workerd/jsg:rtti",
        "//src/workerd/server:workerd_capnp",
    ],
)

# Moved out of io library so that it does not depend on lolhtml and the associated rust crates.
# This reduces the linker input size for tests based on io.
wd_cc_library(
    name = "html-rewriter",
    srcs = ["html-rewriter.c++"],
    hdrs = ["html-rewriter.h"],
    implementation_deps = [
        "@com_cloudflare_lol_html//:lolhtml",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/workerd/io",
    ],
)

wd_cc_library(
    name = "pyodide",
    srcs = ["pyodide.c++"],
    hdrs = [
        "pyodide.h",
        "//src/pyodide:generated/pyodide_extra.capnp.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/pyodide",
        "//src/pyodide:pyodide_extra_capnp",
        "//src/workerd/server:workerd_capnp",
    ],
)

wd_cc_capnp_library(
    name = "r2-api_capnp",
    srcs = ["r2-api.capnp"],
    visibility = ["//visibility:public"],
)

wd_cc_capnp_library(
    name = "analytics-engine_capnp",
    srcs = ["analytics-engine.capnp"],
    visibility = ["//visibility:public"],
)

[kj_test(
    src = f,
    deps = [
        "//src/workerd/io",
    ],
) for f in glob(
    ["**/*-test.c++"],
    exclude = [
        "api-rtti-test.c++",
        "actor-state-iocontext-test.c++",
        "cf-property-test.c++",
        "node/*-test.c++",
    ],
)]

kj_test(
    src = "actor-state-iocontext-test.c++",
    deps = [
        "//src/workerd/io",
        "//src/workerd/tests:test-fixture",
    ],
)

kj_test(
    src = "node/buffer-test.c++",
    deps = ["//src/workerd/tests:test-fixture"],
)

kj_test(
    src = "api-rtti-test.c++",
    deps = [
        ":html-rewriter",
        "//src/workerd/io",
        "//src/workerd/jsg:rtti",
    ],
)

kj_test(
    src = "cf-property-test.c++",
    deps = ["//src/workerd/tests:test-fixture"],
)

[wd_test(
    src = f,
    args = ["--experimental"],
    data = [f.removesuffix(".wd-test") + ".js"],
) for f in glob(
    ["**/*.wd-test"],
)]
