load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@bazel_skylib//rules:copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@capnp-cpp//src/capnp:cc_capnp_library.bzl", "cc_capnp_library")
load("//:build/capnp_embed.bzl", "capnp_embed")
load("//:build/js_file.bzl", "js_file")
load("//:build/pyodide_bucket.bzl", "PYODIDE_PACKAGE_BUCKET_URL")
load("//:build/wd_ts_bundle.bzl", "wd_ts_bundle")

copy_file(
    name = "pyodide_packages_archive",
    src = "@pyodide_packages//:pyodide_packages.tar",
    out = "generated/pyodide_packages.tar",
)

capnp_embed(
    name = "pyodide_packages_archive_embed",
    src = "generated/pyodide_packages.tar",
    deps = ["pyodide_packages_archive"],
)

copy_file(
    name = "python_entrypoint_file",
    src = "python-entrypoint.js",
    out = "generated/python-entrypoint.js",
)

capnp_embed(
    name = "python_entrypoint_file_embed",
    src = "generated/python-entrypoint.js",
    deps = ["python_entrypoint_file"],
)

copy_file(
    name = "pyodide_extra_capnp_file",
    src = "pyodide_extra.capnp",
    out = "generated/pyodide_extra.capnp",
)

capnp_embed(
    name = "pyodide_extra_file_embed",
    src = "generated/pyodide_extra.capnp",
    deps = ["pyodide_extra_capnp_file"],
)

capnp_embed(
    name = "pyodide_lock_file_embed",
    src = "generated/pyodide-lock.json",
    deps = ["pyodide-lock.js@rule"],
)

cc_capnp_library(
    name = "pyodide_extra_capnp",
    srcs = ["generated/pyodide_extra.capnp"],
    visibility = ["//visibility:public"],
    deps = [
        ":pyodide_extra_file_embed",
        ":pyodide_lock_file_embed",
        ":pyodide_packages_archive_embed",
        ":python_entrypoint_file_embed",
    ],
)

copy_file(
    name = "pyodide.asm.wasm@rule",
    src = "@pyodide//:pyodide/pyodide.asm.wasm",
    out = "generated/pyodide.asm.wasm",
)

copy_file(
    name = "python_stdlib.zip@rule",
    src = "@pyodide//:pyodide/python_stdlib.zip",
    out = "generated/python_stdlib.zip",
)

copy_file(
    name = "pyodide-lock.js@rule",
    src = "@pyodide-lock.json//file",
    out = "generated/pyodide-lock.json",
)

# pyodide.asm.js patches
# TODO: all of these should be fixed by linking our own Pyodide or by upstreaming.

PRELUDE = """
import { newWasmModule, monotonicDateNow, wasmInstantiate, getRandomValues } from "pyodide-internal:pool/builtin_wrappers";

// Pyodide uses `new URL(some_url, location)` to resolve the path in `loadPackage`. Setting
// `location = undefined` makes this throw an error if some_url is not an absolute url. Which is what
// we want here, it doesn't make sense to load a package from a relative URL.
const location = undefined;

function addEventListener(){}

function reportUndefinedSymbolsNoOp() {}
"""

REPLACEMENTS = [
    [
        # Convert pyodide.asm.js into an es6 module.
        # When we link our own we can pass `-sES6_MODULE` to the linker and it will do this for us
        # automatically.
        "var _createPyodideModule",
        PRELUDE + "export const _createPyodideModule",
    ],
    [
        "globalThis._createPyodideModule = _createPyodideModule;",
        "",
    ],
    [
        "new WebAssembly.Module",
        "newWasmModule",
    ],
    [
        "WebAssembly.instantiate",
        "wasmInstantiate",
    ],
    [
        "Date.now",
        "monotonicDateNow",
    ],
    [
        "reportUndefinedSymbols()",
        "reportUndefinedSymbolsNoOp()",
    ],
    [
        "crypto.getRandomValues(",
        "getRandomValues(Module, ",
    ],
    [
        # Direct eval disallowed in esbuild, see:
        # https://esbuild.github.io/content-types/#direct-eval
        "eval(func)",
        "(() => {throw new Error('Internal Emscripten code tried to eval, this should not happen, please file a bug report with your requirements.txt file\\'s contents')})()",
    ],
    [
        "eval(data)",
        "(() => {throw new Error('Internal Emscripten code tried to eval, this should not happen, please file a bug report with your requirements.txt file\\'s contents')})()",
    ],
    [
        "eval(UTF8ToString(ptr))",
        "(() => {throw new Error('Internal Emscripten code tried to eval, this should not happen, please file a bug report with your requirements.txt file\\'s contents')})()",
    ],
]

PYODIDE_BUCKET_MODULE = json.encode({
    "PYODIDE_PACKAGE_BUCKET_URL": PYODIDE_PACKAGE_BUCKET_URL,
})

write_file(
    name = "pyodide-bucket.json@rule",
    out = "generated/pyodide-bucket.json",
    content = [PYODIDE_BUCKET_MODULE],
)

expand_template(
    name = "pyodide.asm.js@rule",
    out = "generated/pyodide.asm.js",
    substitutions = dict(REPLACEMENTS),
    template = "@pyodide//:pyodide/pyodide.asm.js",
)

js_file(
    name = "pyodide.asm.js@rule_js",
    srcs = ["generated/pyodide.asm.js"],
    deps = ["pyodide.asm.js@rule"],
)

esbuild(
    name = "generated/emscriptenSetup",
    srcs = glob([
        "internal/pool/*",
    ]) + [
        "generated/pyodide.asm.js",
        "internal/util.ts",
    ],
    config = "internal/pool/esbuild.config.mjs",
    entry_point = "internal/pool/emscriptenSetup.ts",
    external = [
        "fs",
        "path",
        "url",
        "vm",
        "path",
        "crypto",
        "ws",
        "child_process",
    ],
    format = "esm",
    output = "generated/emscriptenSetup.js",
    target = "esnext",
    deps = ["pyodide.asm.js@rule_js"],
)

INTERNAL_MODULES = glob(
    [
        "internal/*.ts",
        "internal/topLevelEntropy/*.ts",
        # The pool directory is only needed by typescript, it shouldn't be used at runtime.
        "internal/pool/*.ts",
        "types/*.ts",
        "types/*/*.ts",
    ],
    allow_empty = True,
)

MODULES = ["python-entrypoint-helper.ts"]

INTERNAL_DATA_MODULES = glob([
    "internal/*.py",
    "internal/patches/*.py",
    "internal/topLevelEntropy/*.py",
]) + [
    "generated/python_stdlib.zip",
    "generated/pyodide.asm.wasm",
    "generated/emscriptenSetup.js",
]

wd_ts_bundle(
    name = "pyodide",
    eslintrc_json = "eslint.config.mjs",
    import_name = "pyodide",
    internal_data_modules = INTERNAL_DATA_MODULES,
    internal_json_modules = [
        "generated/pyodide-lock.json",
        "generated/pyodide-bucket.json",
    ],
    internal_modules = INTERNAL_MODULES,
    js_deps = [
        "generated/emscriptenSetup",
        "pyodide.asm.wasm@rule",
        "python_stdlib.zip@rule",
        "pyodide-lock.js@rule",
        "pyodide-bucket.json@rule",
    ],
    lint = False,
    modules = MODULES,
    schema_id = "0xbcc8f57c63814005",
    tsconfig_json = "tsconfig.json",
)

genrule(
    name = "pyodide.capnp.bin@rule",
    srcs = [
        ":pyodide.capnp",
        "//src/workerd/jsg:modules.capnp",
    ] + [
        ":pyodide-" + m.replace("/", "_").removesuffix(".ts")
        for m in INTERNAL_MODULES
        if not m.endswith(".d.ts")
    ] + [
        ":pyodide-" + m.replace("/", "_").removesuffix(".ts") + ".d.ts"
        for m in INTERNAL_MODULES
        if not m.endswith(".d.ts") and m.endswith(".ts")
    ] + [
        ":pyodide_" + m.replace("/", "_").removesuffix(".ts")
        for m in MODULES
    ] + [
        ":pyodide_" + m.replace("/", "_").removesuffix(".ts") + ".d.ts"
        for m in MODULES
    ] + [
        ":pyodide-" + m.replace("/", "_")
        for m in INTERNAL_DATA_MODULES
        if m.endswith(".py")
    ] + [
        ":pyodide-internal_generated_emscriptenSetup.js",
        ":pyodide-internal_generated_pyodide.asm.wasm",
        ":pyodide-internal_generated_python_stdlib.zip",
        ":pyodide-internal_generated_pyodide-lock.json",
        ":pyodide-internal_generated_pyodide-bucket.json",
    ],
    outs = ["pyodide.capnp.bin"],
    cmd = " ".join([
        # Annoying logic to deal with different paths in workerd vs downstream.
        # Either need "-I src" in workerd or -I external/workerd/src downstream
        "INCLUDE=$$(stat src > /dev/null 2>&1 && echo src || echo external/workerd/src);",
        "$(execpath @capnp-cpp//src/capnp:capnp_tool)",
        "eval",
        "$(location :pyodide.capnp)",
        "pyodideBundle",
        "-I $$INCLUDE",
        "-o binary",
        "> $@",
    ]),
    tools = ["@capnp-cpp//src/capnp:capnp_tool"],
    visibility = ["//visibility:public"],
)
