build --cxxopt='-std=c++20' --host_cxxopt='-std=c++20' --force_pic --verbose_failures
build --cxxopt='-fcoroutines-ts' --host_cxxopt='-fcoroutines-ts'
build --cxxopt='-stdlib=libc++' --host_cxxopt='-stdlib=libc++'
build --linkopt='-stdlib=libc++' --host_linkopt='-stdlib=libc++'

build --action_env=BAZEL_COMPILER=clang
build --action_env=CC=clang
build --action_env=CXX=clang++

build --@capnp-cpp//src/kj:openssl=True --@capnp-cpp//src/kj:zlib=True --@capnp-cpp//src/kj:libdl=True

# Warning options.
build --cxxopt='-Wall' --host_cxxopt='-Wall'
build --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'
build --cxxopt='-Wno-missing-field-initializers' --host_cxxopt='-Wno-missing-field-initializers'
build --cxxopt='-Wno-ignored-qualifiers' --host_cxxopt='-Wno-ignored-qualifiers'

# Our dependencies (ICU, zlib, etc.) produce a lot of these warnings, so we disable them.
# TODO(cleanup): Can we disable warnings altogether from our dependencies, without disabling them
#   for workerd?
build --cxxopt='-Wno-ambiguous-reversed-operator' --host_cxxopt='-Wno-ambiguous-reversed-operator'


# optimized LTO build. you'll need a fairly recent clang for this to work
build:thin-lto -c opt
build:thin-lto --cxxopt='-flto=thin'
build:thin-lto --linkopt='-flto=thin'
