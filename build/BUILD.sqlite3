load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

filegroup(
    name = "src",
    srcs = [
        "aclocal.m4",
        "config.guess",
        "config.sub",
        "configure",
        "configure.ac",
        "install-sh",
        "LICENSE.md",
        "ltmain.sh",
        "magic.txt",
        "main.mk",
        "Makefile.in",
        "Makefile.linux-gcc",
        "Makefile.msc",
        "manifest",
        "manifest.uuid",
        "mkso.sh",
        "README.md",
        "spec.template",
        "sqlite3.1",
        "sqlite3.pc.in",
        "sqlite_cfg.h.in",
        "sqlite.pc.in",
        "VERSION",
    ]
    + glob(["ext/**/*.c", "ext/**/*.h", "ext/**/*.tcl", "ext/**/*.y"])
    + glob(["src/*.c", "src/*.h", "src/*.in", "src/*.y"])
    + glob(["tool/**/*"]),
)

configure_make(
    name = "amalgamation",
    configure_options = ["--enable-update-limit"],
    targets = [
        "sqlite3.c",
        "sqlite3.h",
        "sqlite3ext.h",
    ],

    # No, they're not executable binaries, but configure_make doesn't
    # support arbitrary outputs, only binaries and libraries. If we
    # call these files "binaries", then configure_make is happy.
    postfix_script = "mkdir -p $INSTALLDIR/fakebin && cp sqlite3.c sqlite3.h sqlite3ext.h $INSTALLDIR/fakebin",
    out_bin_dir = "fakebin",
    out_binaries = ["sqlite3.c", "sqlite3.h", "sqlite3ext.h"],

    lib_source = ":src",
    visibility = ["//visibility:private"],
)

# This makes the files generated by :amalgamation available for use by the "sqlite3" cc_library rule below.
genrule(
    name = "renamed_amalgamation",

    # Depend via tools, not srcs, so cross-compilation works.
    #
    # If Bazel is cross-compiling, say building on Linux x86_64 ("execution platform") for Linux aarch64
    # ("target platform"), then the amalgamation build process has to run on the execution platform or it
    # fails. If we depend on :amalgamation via the "srcs" attribute, then Bazel sets CC/CFLAGS/etc. for
    # aarch64, so then the SQLite build process can't run the binaries it builds, so it fails.
    #
    # However, the "tools" attribute makes Bazel do all of :amalgamation's steps on x86_64 (or whatever the
    # execution platform is), which produces the right result.
    tools = [":amalgamation"],

    outs = ["sqlite3.c", "sqlite3.h", "sqlite3ext.h"],
    # configure_make insists on including an include dir in its outputs, so we need "cp -r" or else the
    # command fails. That is, $(locations :amalgamation) expands to something like
    # "bazel-out/.../fakebin/sqlite3{.c,.h,ext.h} bazel-out/.../include", where the "include" dir is empty.
    #
    # If we could get that out of configure_make's outputs, we could drop the "-r".
    #
    # The include dir is not one of this rule's outputs, though, so at least our dependents don't see it.
    cmd = "cp -r $(locations :amalgamation) $(RULEDIR)/",
    visibility = ["//visibility:private"],
)

cc_library(
    name = "sqlite3",
    hdrs = ["sqlite3.h", "sqlite3ext.h"],
    srcs = ["sqlite3.c"],
    deps = [":renamed_amalgamation"],
    visibility = ["//visibility:public"],
    include_prefix = ".",
    copts = ["-w"],  # Ignore all warnings. This is not our code, we can't fix the warnings.
    defines = [
        "SQLITE_MAX_ALLOCATION_SIZE=16777216",  # 16MB
        "SQLITE_PRINTF_PRECISION_LIMIT=100000",
        "SQLITE_ENABLE_FTS5",
        "SQLITE_ENABLE_NORMALIZE",
        "SQLITE_ENABLE_MATH_FUNCTIONS",
        "SQLITE_DEFAULT_FOREIGN_KEYS=1",
        "SQLITE_ENABLE_UPDATE_DELETE_LIMIT",
    ]
)
