name: Run internal build

# Trigger edgeworker CI builds for workerd PRs
# Uses pull_request_target to access secrets for fork handling
on:
  pull_request_target:

concurrency:
  # Cancel existing builds for the same PR.
  # Otherwise, all other builds will be allowed to run through.
  group: internal-build.yml-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  # Handle forks from Cloudflare org members by creating mirror branches  
  handle-fork:
    if: "${{ github.event.pull_request.head.repo.fork }}"
    runs-on: ubuntu-latest
    steps:
      - name: Check Cloudflare org membership
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          author="${{ github.event.pull_request.user.login }}"
          echo "Fork detected. Checking if $author is a Cloudflare org member..."
          
          if gh api orgs/cloudflare/members/$author --silent 2>/dev/null; then
            echo "✓ Cloudflare org member confirmed"
          else
            echo "✗ Not a Cloudflare org member"
            echo ""
            echo "This workflow only runs for forks from Cloudflare organization members."
            echo "If you're an external contributor, please ask the auto-assigned reviewers"
            echo "to run the internal build workflow on your behalf."
            exit 1
          fi

      - name: Validate merge commit exists
        run: |
          if [[ "${{ github.event.pull_request.merge_commit_sha }}" == "" ]]; then
            echo "No merge commit SHA - PR may have conflicts"
            exit 1
          fi

      - name: Checkout base repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Create mirror branch in main repo from fork's merge commit
      # This allows workerd-robot to find the commit in the main repo
      - name: Create mirror branch from merge commit
        id: mirror_branch
        env:
          PR_USER: ${{ github.event.pull_request.user.login }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
          MERGE_SHA: ${{ github.event.pull_request.merge_commit_sha }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
        run: |
          mirror_branch="workerd-robot/$PR_USER/$PR_HEAD_REF"
          merge_sha="$MERGE_SHA"
          run_attempt="$RUN_ATTEMPT"
          
          echo "Mirror branch: $mirror_branch"
          echo "Merge commit SHA: $merge_sha"
          echo "Run attempt: $run_attempt"
          
          if [[ "$run_attempt" == "1" ]]; then
            echo "First run - creating fresh mirror branch"
            # Delete existing mirror if present
            git push origin --delete "$mirror_branch" 2>/dev/null || echo "Mirror branch didn't exist"
            
            # Create branch directly from merge commit SHA
            git checkout -b "$mirror_branch" "$merge_sha"
            git push origin "$mirror_branch"
          else
            echo "Rerun detected - using existing mirror branch"
            # Just checkout the existing mirror branch
            git fetch origin "$mirror_branch"
            git checkout "$mirror_branch"
          fi
          
          # Get the HEAD SHA of the mirror branch (same as merge_sha, but now exists in main repo)
          mirror_head_sha=$(git rev-parse HEAD)
          echo "mirror_head_sha=$mirror_head_sha" >> $GITHUB_OUTPUT
          echo "mirror_branch=$mirror_branch" >> $GITHUB_OUTPUT

      - name: Run internal build for fork
        env:
          CI_URL: ${{ secrets.CI_URL }}
          CI_CLIENT_ID: ${{ secrets.CI_CF_ACCESS_CLIENT_ID }}
          CI_CLIENT_SECRET: ${{ secrets.CI_CF_ACCESS_CLIENT_SECRET }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          MIRROR_HEAD_SHA: ${{ steps.mirror_branch.outputs.mirror_head_sha }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          MIRROR_BRANCH: ${{ steps.mirror_branch.outputs.mirror_branch }}
        run: |
          python3 -u ./tools/cross/internal_build.py \
            "$PR_NUMBER" \
            "$MIRROR_HEAD_SHA" \
            "$PR_HEAD_SHA" \
            "$RUN_ATTEMPT" \
            "$MIRROR_BRANCH" \
            "$CI_URL" \
            "$CI_CLIENT_ID" \
            "$CI_CLIENT_SECRET"

  # Handle regular PRs from the main repo (not forks)
  handle-regular-pr:
    if: "${{ !github.event.pull_request.head.repo.fork }}"
    runs-on: ubuntu-latest
    steps:
      # Try to checkout the merge commit - will fail if PR isn't mergeable
      - uses: actions/checkout@v4
        id: checkout_merge
        continue-on-error: true
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge
          show-progress: false

      # Fail the workflow if checkout failed (PR isn't mergeable)
      - name: Fail if PR isn't mergeable
        if: steps.checkout_merge.outcome != 'success'
        run: |
          echo "The pull request is not mergeable. Please rebase and resolve any conflicts."
          exit 1

      - name: Get merge commit SHA
        id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
      - name: Run internal build
        env:
          CI_URL: ${{ secrets.CI_URL }}
          CI_CLIENT_ID: ${{ secrets.CI_CF_ACCESS_CLIENT_ID }}
          CI_CLIENT_SECRET: ${{ secrets.CI_CF_ACCESS_CLIENT_SECRET }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          MERGE_SHA: ${{ steps.get_sha.outputs.sha }}
          PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          PR_HEAD_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          python3 -u ./tools/cross/internal_build.py \
            "$PR_NUMBER" \
            "$MERGE_SHA" \
            "$PR_HEAD_SHA" \
            "$RUN_ATTEMPT" \
            "$PR_HEAD_REF" \
            "$CI_URL" \
            "$CI_CLIENT_ID" \
            "$CI_CLIENT_SECRET"